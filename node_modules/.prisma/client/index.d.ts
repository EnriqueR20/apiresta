
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/index';
declare const prisma: unique symbol
export interface PrismaPromise<A> extends Promise<A> {[prisma]: true}
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};


/**
 * Model Usuario
 * 
 */
export type Usuario = {
  id: number
  nombre: string
  dni: number
  telefono: number
  correo: string
  contrasena: string
  es_propietario: boolean
}

/**
 * Model Restaurante
 * 
 */
export type Restaurante = {
  id: number
  nombre: string
  departamento: string
  telefono: number
  referencia: string
  distrito: string
  provincia: string
  usuarioId: number | null
  tipo: string
  apertura: Date
  cierre: Date
  fech_creacion: Date
  calificacion: number
  descripcion: string
}

/**
 * Model Plato
 * 
 */
export type Plato = {
  id: number
  nombre_plato: string
  precio: number
  imagen: string
  disponibilidad: boolean
  descripcion: string
  restaurante_id: number
}

/**
 * Model Comentario
 * 
 */
export type Comentario = {
  id: number
  comentario: string
  calificacion: number
  restaurante_id: number
}


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Usuarios
 * const usuarios = await prisma.usuario.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Usuarios
   * const usuarios = await prisma.usuario.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Prisma.TransactionClient) => Promise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<R>

      /**
   * `prisma.usuario`: Exposes CRUD operations for the **Usuario** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Usuarios
    * const usuarios = await prisma.usuario.findMany()
    * ```
    */
  get usuario(): Prisma.UsuarioDelegate<GlobalReject>;

  /**
   * `prisma.restaurante`: Exposes CRUD operations for the **Restaurante** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Restaurantes
    * const restaurantes = await prisma.restaurante.findMany()
    * ```
    */
  get restaurante(): Prisma.RestauranteDelegate<GlobalReject>;

  /**
   * `prisma.plato`: Exposes CRUD operations for the **Plato** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Platoes
    * const platoes = await prisma.plato.findMany()
    * ```
    */
  get plato(): Prisma.PlatoDelegate<GlobalReject>;

  /**
   * `prisma.comentario`: Exposes CRUD operations for the **Comentario** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Comentarios
    * const comentarios = await prisma.comentario.findMany()
    * ```
    */
  get comentario(): Prisma.ComentarioDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket


  /**
   * Prisma Client JS version: 4.9.0
   * Query Engine version: ceb5c99003b99c9ee2c1d2e618e359c14aef2ea5
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: runtime.Types.Utils.LegacyExact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>

  class PrismaClientFetcher {
    private readonly prisma;
    private readonly debug;
    private readonly hooks?;
    constructor(prisma: PrismaClient<any, any>, debug?: boolean, hooks?: Hooks | undefined);
    request<T>(document: any, dataPath?: string[], rootField?: string, typeName?: string, isList?: boolean, callsite?: string): Promise<T>;
    sanitizeMessage(message: string): string;
    protected unpack(document: any, data: any, path: string[], rootField?: string, isList?: boolean): any;
  }

  export const ModelName: {
    Usuario: 'Usuario',
    Restaurante: 'Restaurante',
    Plato: 'Plato',
    Comentario: 'Comentario'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type DefaultPrismaClient = PrismaClient
  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends RejectOnNotFound
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     * @deprecated since 4.0.0. Use `findUniqueOrThrow`/`findFirstOrThrow` methods instead.
     * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  export type Hooks = {
    beforeRequest?: (options: { query: string, path: string[], rootField?: string, typeName?: string, document: any }) => any
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, '$connect' | '$disconnect' | '$on' | '$transaction' | '$use'>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UsuarioCountOutputType
   */


  export type UsuarioCountOutputType = {
    restaurante: number
  }

  export type UsuarioCountOutputTypeSelect = {
    restaurante?: boolean
  }

  export type UsuarioCountOutputTypeGetPayload<S extends boolean | null | undefined | UsuarioCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? UsuarioCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (UsuarioCountOutputTypeArgs)
    ? UsuarioCountOutputType 
    : S extends { select: any } & (UsuarioCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof UsuarioCountOutputType ? UsuarioCountOutputType[P] : never
  } 
      : UsuarioCountOutputType




  // Custom InputTypes

  /**
   * UsuarioCountOutputType without action
   */
  export type UsuarioCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the UsuarioCountOutputType
     */
    select?: UsuarioCountOutputTypeSelect | null
  }



  /**
   * Count Type RestauranteCountOutputType
   */


  export type RestauranteCountOutputType = {
    plato: number
    comentario: number
  }

  export type RestauranteCountOutputTypeSelect = {
    plato?: boolean
    comentario?: boolean
  }

  export type RestauranteCountOutputTypeGetPayload<S extends boolean | null | undefined | RestauranteCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? RestauranteCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (RestauranteCountOutputTypeArgs)
    ? RestauranteCountOutputType 
    : S extends { select: any } & (RestauranteCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof RestauranteCountOutputType ? RestauranteCountOutputType[P] : never
  } 
      : RestauranteCountOutputType




  // Custom InputTypes

  /**
   * RestauranteCountOutputType without action
   */
  export type RestauranteCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the RestauranteCountOutputType
     */
    select?: RestauranteCountOutputTypeSelect | null
  }



  /**
   * Models
   */

  /**
   * Model Usuario
   */


  export type AggregateUsuario = {
    _count: UsuarioCountAggregateOutputType | null
    _avg: UsuarioAvgAggregateOutputType | null
    _sum: UsuarioSumAggregateOutputType | null
    _min: UsuarioMinAggregateOutputType | null
    _max: UsuarioMaxAggregateOutputType | null
  }

  export type UsuarioAvgAggregateOutputType = {
    id: number | null
    dni: number | null
    telefono: number | null
  }

  export type UsuarioSumAggregateOutputType = {
    id: number | null
    dni: number | null
    telefono: number | null
  }

  export type UsuarioMinAggregateOutputType = {
    id: number | null
    nombre: string | null
    dni: number | null
    telefono: number | null
    correo: string | null
    contrasena: string | null
    es_propietario: boolean | null
  }

  export type UsuarioMaxAggregateOutputType = {
    id: number | null
    nombre: string | null
    dni: number | null
    telefono: number | null
    correo: string | null
    contrasena: string | null
    es_propietario: boolean | null
  }

  export type UsuarioCountAggregateOutputType = {
    id: number
    nombre: number
    dni: number
    telefono: number
    correo: number
    contrasena: number
    es_propietario: number
    _all: number
  }


  export type UsuarioAvgAggregateInputType = {
    id?: true
    dni?: true
    telefono?: true
  }

  export type UsuarioSumAggregateInputType = {
    id?: true
    dni?: true
    telefono?: true
  }

  export type UsuarioMinAggregateInputType = {
    id?: true
    nombre?: true
    dni?: true
    telefono?: true
    correo?: true
    contrasena?: true
    es_propietario?: true
  }

  export type UsuarioMaxAggregateInputType = {
    id?: true
    nombre?: true
    dni?: true
    telefono?: true
    correo?: true
    contrasena?: true
    es_propietario?: true
  }

  export type UsuarioCountAggregateInputType = {
    id?: true
    nombre?: true
    dni?: true
    telefono?: true
    correo?: true
    contrasena?: true
    es_propietario?: true
    _all?: true
  }

  export type UsuarioAggregateArgs = {
    /**
     * Filter which Usuario to aggregate.
     */
    where?: UsuarioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Usuarios to fetch.
     */
    orderBy?: Enumerable<UsuarioOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UsuarioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Usuarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Usuarios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Usuarios
    **/
    _count?: true | UsuarioCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UsuarioAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UsuarioSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UsuarioMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UsuarioMaxAggregateInputType
  }

  export type GetUsuarioAggregateType<T extends UsuarioAggregateArgs> = {
        [P in keyof T & keyof AggregateUsuario]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUsuario[P]>
      : GetScalarType<T[P], AggregateUsuario[P]>
  }




  export type UsuarioGroupByArgs = {
    where?: UsuarioWhereInput
    orderBy?: Enumerable<UsuarioOrderByWithAggregationInput>
    by: UsuarioScalarFieldEnum[]
    having?: UsuarioScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UsuarioCountAggregateInputType | true
    _avg?: UsuarioAvgAggregateInputType
    _sum?: UsuarioSumAggregateInputType
    _min?: UsuarioMinAggregateInputType
    _max?: UsuarioMaxAggregateInputType
  }


  export type UsuarioGroupByOutputType = {
    id: number
    nombre: string
    dni: number
    telefono: number
    correo: string
    contrasena: string
    es_propietario: boolean
    _count: UsuarioCountAggregateOutputType | null
    _avg: UsuarioAvgAggregateOutputType | null
    _sum: UsuarioSumAggregateOutputType | null
    _min: UsuarioMinAggregateOutputType | null
    _max: UsuarioMaxAggregateOutputType | null
  }

  type GetUsuarioGroupByPayload<T extends UsuarioGroupByArgs> = PrismaPromise<
    Array<
      PickArray<UsuarioGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UsuarioGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UsuarioGroupByOutputType[P]>
            : GetScalarType<T[P], UsuarioGroupByOutputType[P]>
        }
      >
    >


  export type UsuarioSelect = {
    id?: boolean
    nombre?: boolean
    dni?: boolean
    telefono?: boolean
    correo?: boolean
    contrasena?: boolean
    es_propietario?: boolean
    restaurante?: boolean | Usuario$restauranteArgs
    _count?: boolean | UsuarioCountOutputTypeArgs
  }


  export type UsuarioInclude = {
    restaurante?: boolean | Usuario$restauranteArgs
    _count?: boolean | UsuarioCountOutputTypeArgs
  }

  export type UsuarioGetPayload<S extends boolean | null | undefined | UsuarioArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Usuario :
    S extends undefined ? never :
    S extends { include: any } & (UsuarioArgs | UsuarioFindManyArgs)
    ? Usuario  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'restaurante' ? Array < RestauranteGetPayload<S['include'][P]>>  :
        P extends '_count' ? UsuarioCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (UsuarioArgs | UsuarioFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'restaurante' ? Array < RestauranteGetPayload<S['select'][P]>>  :
        P extends '_count' ? UsuarioCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Usuario ? Usuario[P] : never
  } 
      : Usuario


  type UsuarioCountArgs = 
    Omit<UsuarioFindManyArgs, 'select' | 'include'> & {
      select?: UsuarioCountAggregateInputType | true
    }

  export interface UsuarioDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Usuario that matches the filter.
     * @param {UsuarioFindUniqueArgs} args - Arguments to find a Usuario
     * @example
     * // Get one Usuario
     * const usuario = await prisma.usuario.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UsuarioFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, UsuarioFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Usuario'> extends True ? Prisma__UsuarioClient<UsuarioGetPayload<T>> : Prisma__UsuarioClient<UsuarioGetPayload<T> | null, null>

    /**
     * Find one Usuario that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {UsuarioFindUniqueOrThrowArgs} args - Arguments to find a Usuario
     * @example
     * // Get one Usuario
     * const usuario = await prisma.usuario.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UsuarioFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, UsuarioFindUniqueOrThrowArgs>
    ): Prisma__UsuarioClient<UsuarioGetPayload<T>>

    /**
     * Find the first Usuario that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioFindFirstArgs} args - Arguments to find a Usuario
     * @example
     * // Get one Usuario
     * const usuario = await prisma.usuario.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UsuarioFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, UsuarioFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Usuario'> extends True ? Prisma__UsuarioClient<UsuarioGetPayload<T>> : Prisma__UsuarioClient<UsuarioGetPayload<T> | null, null>

    /**
     * Find the first Usuario that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioFindFirstOrThrowArgs} args - Arguments to find a Usuario
     * @example
     * // Get one Usuario
     * const usuario = await prisma.usuario.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UsuarioFindFirstOrThrowArgs>(
      args?: SelectSubset<T, UsuarioFindFirstOrThrowArgs>
    ): Prisma__UsuarioClient<UsuarioGetPayload<T>>

    /**
     * Find zero or more Usuarios that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Usuarios
     * const usuarios = await prisma.usuario.findMany()
     * 
     * // Get first 10 Usuarios
     * const usuarios = await prisma.usuario.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const usuarioWithIdOnly = await prisma.usuario.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UsuarioFindManyArgs>(
      args?: SelectSubset<T, UsuarioFindManyArgs>
    ): PrismaPromise<Array<UsuarioGetPayload<T>>>

    /**
     * Create a Usuario.
     * @param {UsuarioCreateArgs} args - Arguments to create a Usuario.
     * @example
     * // Create one Usuario
     * const Usuario = await prisma.usuario.create({
     *   data: {
     *     // ... data to create a Usuario
     *   }
     * })
     * 
    **/
    create<T extends UsuarioCreateArgs>(
      args: SelectSubset<T, UsuarioCreateArgs>
    ): Prisma__UsuarioClient<UsuarioGetPayload<T>>

    /**
     * Delete a Usuario.
     * @param {UsuarioDeleteArgs} args - Arguments to delete one Usuario.
     * @example
     * // Delete one Usuario
     * const Usuario = await prisma.usuario.delete({
     *   where: {
     *     // ... filter to delete one Usuario
     *   }
     * })
     * 
    **/
    delete<T extends UsuarioDeleteArgs>(
      args: SelectSubset<T, UsuarioDeleteArgs>
    ): Prisma__UsuarioClient<UsuarioGetPayload<T>>

    /**
     * Update one Usuario.
     * @param {UsuarioUpdateArgs} args - Arguments to update one Usuario.
     * @example
     * // Update one Usuario
     * const usuario = await prisma.usuario.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UsuarioUpdateArgs>(
      args: SelectSubset<T, UsuarioUpdateArgs>
    ): Prisma__UsuarioClient<UsuarioGetPayload<T>>

    /**
     * Delete zero or more Usuarios.
     * @param {UsuarioDeleteManyArgs} args - Arguments to filter Usuarios to delete.
     * @example
     * // Delete a few Usuarios
     * const { count } = await prisma.usuario.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UsuarioDeleteManyArgs>(
      args?: SelectSubset<T, UsuarioDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Usuarios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Usuarios
     * const usuario = await prisma.usuario.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UsuarioUpdateManyArgs>(
      args: SelectSubset<T, UsuarioUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Usuario.
     * @param {UsuarioUpsertArgs} args - Arguments to update or create a Usuario.
     * @example
     * // Update or create a Usuario
     * const usuario = await prisma.usuario.upsert({
     *   create: {
     *     // ... data to create a Usuario
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Usuario we want to update
     *   }
     * })
    **/
    upsert<T extends UsuarioUpsertArgs>(
      args: SelectSubset<T, UsuarioUpsertArgs>
    ): Prisma__UsuarioClient<UsuarioGetPayload<T>>

    /**
     * Count the number of Usuarios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioCountArgs} args - Arguments to filter Usuarios to count.
     * @example
     * // Count the number of Usuarios
     * const count = await prisma.usuario.count({
     *   where: {
     *     // ... the filter for the Usuarios we want to count
     *   }
     * })
    **/
    count<T extends UsuarioCountArgs>(
      args?: Subset<T, UsuarioCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UsuarioCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Usuario.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UsuarioAggregateArgs>(args: Subset<T, UsuarioAggregateArgs>): PrismaPromise<GetUsuarioAggregateType<T>>

    /**
     * Group by Usuario.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UsuarioGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UsuarioGroupByArgs['orderBy'] }
        : { orderBy?: UsuarioGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UsuarioGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUsuarioGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Usuario.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__UsuarioClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    restaurante<T extends Usuario$restauranteArgs= {}>(args?: Subset<T, Usuario$restauranteArgs>): PrismaPromise<Array<RestauranteGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Usuario base type for findUnique actions
   */
  export type UsuarioFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UsuarioInclude | null
    /**
     * Filter, which Usuario to fetch.
     */
    where: UsuarioWhereUniqueInput
  }

  /**
   * Usuario findUnique
   */
  export interface UsuarioFindUniqueArgs extends UsuarioFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Usuario findUniqueOrThrow
   */
  export type UsuarioFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UsuarioInclude | null
    /**
     * Filter, which Usuario to fetch.
     */
    where: UsuarioWhereUniqueInput
  }


  /**
   * Usuario base type for findFirst actions
   */
  export type UsuarioFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UsuarioInclude | null
    /**
     * Filter, which Usuario to fetch.
     */
    where?: UsuarioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Usuarios to fetch.
     */
    orderBy?: Enumerable<UsuarioOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Usuarios.
     */
    cursor?: UsuarioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Usuarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Usuarios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Usuarios.
     */
    distinct?: Enumerable<UsuarioScalarFieldEnum>
  }

  /**
   * Usuario findFirst
   */
  export interface UsuarioFindFirstArgs extends UsuarioFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Usuario findFirstOrThrow
   */
  export type UsuarioFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UsuarioInclude | null
    /**
     * Filter, which Usuario to fetch.
     */
    where?: UsuarioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Usuarios to fetch.
     */
    orderBy?: Enumerable<UsuarioOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Usuarios.
     */
    cursor?: UsuarioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Usuarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Usuarios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Usuarios.
     */
    distinct?: Enumerable<UsuarioScalarFieldEnum>
  }


  /**
   * Usuario findMany
   */
  export type UsuarioFindManyArgs = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UsuarioInclude | null
    /**
     * Filter, which Usuarios to fetch.
     */
    where?: UsuarioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Usuarios to fetch.
     */
    orderBy?: Enumerable<UsuarioOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Usuarios.
     */
    cursor?: UsuarioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Usuarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Usuarios.
     */
    skip?: number
    distinct?: Enumerable<UsuarioScalarFieldEnum>
  }


  /**
   * Usuario create
   */
  export type UsuarioCreateArgs = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UsuarioInclude | null
    /**
     * The data needed to create a Usuario.
     */
    data: XOR<UsuarioCreateInput, UsuarioUncheckedCreateInput>
  }


  /**
   * Usuario update
   */
  export type UsuarioUpdateArgs = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UsuarioInclude | null
    /**
     * The data needed to update a Usuario.
     */
    data: XOR<UsuarioUpdateInput, UsuarioUncheckedUpdateInput>
    /**
     * Choose, which Usuario to update.
     */
    where: UsuarioWhereUniqueInput
  }


  /**
   * Usuario updateMany
   */
  export type UsuarioUpdateManyArgs = {
    /**
     * The data used to update Usuarios.
     */
    data: XOR<UsuarioUpdateManyMutationInput, UsuarioUncheckedUpdateManyInput>
    /**
     * Filter which Usuarios to update
     */
    where?: UsuarioWhereInput
  }


  /**
   * Usuario upsert
   */
  export type UsuarioUpsertArgs = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UsuarioInclude | null
    /**
     * The filter to search for the Usuario to update in case it exists.
     */
    where: UsuarioWhereUniqueInput
    /**
     * In case the Usuario found by the `where` argument doesn't exist, create a new Usuario with this data.
     */
    create: XOR<UsuarioCreateInput, UsuarioUncheckedCreateInput>
    /**
     * In case the Usuario was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UsuarioUpdateInput, UsuarioUncheckedUpdateInput>
  }


  /**
   * Usuario delete
   */
  export type UsuarioDeleteArgs = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UsuarioInclude | null
    /**
     * Filter which Usuario to delete.
     */
    where: UsuarioWhereUniqueInput
  }


  /**
   * Usuario deleteMany
   */
  export type UsuarioDeleteManyArgs = {
    /**
     * Filter which Usuarios to delete
     */
    where?: UsuarioWhereInput
  }


  /**
   * Usuario.restaurante
   */
  export type Usuario$restauranteArgs = {
    /**
     * Select specific fields to fetch from the Restaurante
     */
    select?: RestauranteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RestauranteInclude | null
    where?: RestauranteWhereInput
    orderBy?: Enumerable<RestauranteOrderByWithRelationInput>
    cursor?: RestauranteWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<RestauranteScalarFieldEnum>
  }


  /**
   * Usuario without action
   */
  export type UsuarioArgs = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UsuarioInclude | null
  }



  /**
   * Model Restaurante
   */


  export type AggregateRestaurante = {
    _count: RestauranteCountAggregateOutputType | null
    _avg: RestauranteAvgAggregateOutputType | null
    _sum: RestauranteSumAggregateOutputType | null
    _min: RestauranteMinAggregateOutputType | null
    _max: RestauranteMaxAggregateOutputType | null
  }

  export type RestauranteAvgAggregateOutputType = {
    id: number | null
    telefono: number | null
    usuarioId: number | null
    calificacion: number | null
  }

  export type RestauranteSumAggregateOutputType = {
    id: number | null
    telefono: number | null
    usuarioId: number | null
    calificacion: number | null
  }

  export type RestauranteMinAggregateOutputType = {
    id: number | null
    nombre: string | null
    departamento: string | null
    telefono: number | null
    referencia: string | null
    distrito: string | null
    provincia: string | null
    usuarioId: number | null
    tipo: string | null
    apertura: Date | null
    cierre: Date | null
    fech_creacion: Date | null
    calificacion: number | null
    descripcion: string | null
  }

  export type RestauranteMaxAggregateOutputType = {
    id: number | null
    nombre: string | null
    departamento: string | null
    telefono: number | null
    referencia: string | null
    distrito: string | null
    provincia: string | null
    usuarioId: number | null
    tipo: string | null
    apertura: Date | null
    cierre: Date | null
    fech_creacion: Date | null
    calificacion: number | null
    descripcion: string | null
  }

  export type RestauranteCountAggregateOutputType = {
    id: number
    nombre: number
    departamento: number
    telefono: number
    referencia: number
    distrito: number
    provincia: number
    usuarioId: number
    tipo: number
    apertura: number
    cierre: number
    fech_creacion: number
    calificacion: number
    descripcion: number
    _all: number
  }


  export type RestauranteAvgAggregateInputType = {
    id?: true
    telefono?: true
    usuarioId?: true
    calificacion?: true
  }

  export type RestauranteSumAggregateInputType = {
    id?: true
    telefono?: true
    usuarioId?: true
    calificacion?: true
  }

  export type RestauranteMinAggregateInputType = {
    id?: true
    nombre?: true
    departamento?: true
    telefono?: true
    referencia?: true
    distrito?: true
    provincia?: true
    usuarioId?: true
    tipo?: true
    apertura?: true
    cierre?: true
    fech_creacion?: true
    calificacion?: true
    descripcion?: true
  }

  export type RestauranteMaxAggregateInputType = {
    id?: true
    nombre?: true
    departamento?: true
    telefono?: true
    referencia?: true
    distrito?: true
    provincia?: true
    usuarioId?: true
    tipo?: true
    apertura?: true
    cierre?: true
    fech_creacion?: true
    calificacion?: true
    descripcion?: true
  }

  export type RestauranteCountAggregateInputType = {
    id?: true
    nombre?: true
    departamento?: true
    telefono?: true
    referencia?: true
    distrito?: true
    provincia?: true
    usuarioId?: true
    tipo?: true
    apertura?: true
    cierre?: true
    fech_creacion?: true
    calificacion?: true
    descripcion?: true
    _all?: true
  }

  export type RestauranteAggregateArgs = {
    /**
     * Filter which Restaurante to aggregate.
     */
    where?: RestauranteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Restaurantes to fetch.
     */
    orderBy?: Enumerable<RestauranteOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RestauranteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Restaurantes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Restaurantes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Restaurantes
    **/
    _count?: true | RestauranteCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RestauranteAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RestauranteSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RestauranteMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RestauranteMaxAggregateInputType
  }

  export type GetRestauranteAggregateType<T extends RestauranteAggregateArgs> = {
        [P in keyof T & keyof AggregateRestaurante]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRestaurante[P]>
      : GetScalarType<T[P], AggregateRestaurante[P]>
  }




  export type RestauranteGroupByArgs = {
    where?: RestauranteWhereInput
    orderBy?: Enumerable<RestauranteOrderByWithAggregationInput>
    by: RestauranteScalarFieldEnum[]
    having?: RestauranteScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RestauranteCountAggregateInputType | true
    _avg?: RestauranteAvgAggregateInputType
    _sum?: RestauranteSumAggregateInputType
    _min?: RestauranteMinAggregateInputType
    _max?: RestauranteMaxAggregateInputType
  }


  export type RestauranteGroupByOutputType = {
    id: number
    nombre: string
    departamento: string
    telefono: number
    referencia: string
    distrito: string
    provincia: string
    usuarioId: number | null
    tipo: string
    apertura: Date
    cierre: Date
    fech_creacion: Date
    calificacion: number
    descripcion: string
    _count: RestauranteCountAggregateOutputType | null
    _avg: RestauranteAvgAggregateOutputType | null
    _sum: RestauranteSumAggregateOutputType | null
    _min: RestauranteMinAggregateOutputType | null
    _max: RestauranteMaxAggregateOutputType | null
  }

  type GetRestauranteGroupByPayload<T extends RestauranteGroupByArgs> = PrismaPromise<
    Array<
      PickArray<RestauranteGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RestauranteGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RestauranteGroupByOutputType[P]>
            : GetScalarType<T[P], RestauranteGroupByOutputType[P]>
        }
      >
    >


  export type RestauranteSelect = {
    id?: boolean
    nombre?: boolean
    departamento?: boolean
    telefono?: boolean
    referencia?: boolean
    distrito?: boolean
    provincia?: boolean
    usuario?: boolean | UsuarioArgs
    usuarioId?: boolean
    tipo?: boolean
    apertura?: boolean
    cierre?: boolean
    fech_creacion?: boolean
    calificacion?: boolean
    descripcion?: boolean
    plato?: boolean | Restaurante$platoArgs
    comentario?: boolean | Restaurante$comentarioArgs
    _count?: boolean | RestauranteCountOutputTypeArgs
  }


  export type RestauranteInclude = {
    usuario?: boolean | UsuarioArgs
    plato?: boolean | Restaurante$platoArgs
    comentario?: boolean | Restaurante$comentarioArgs
    _count?: boolean | RestauranteCountOutputTypeArgs
  }

  export type RestauranteGetPayload<S extends boolean | null | undefined | RestauranteArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Restaurante :
    S extends undefined ? never :
    S extends { include: any } & (RestauranteArgs | RestauranteFindManyArgs)
    ? Restaurante  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'usuario' ? UsuarioGetPayload<S['include'][P]> | null :
        P extends 'plato' ? Array < PlatoGetPayload<S['include'][P]>>  :
        P extends 'comentario' ? Array < ComentarioGetPayload<S['include'][P]>>  :
        P extends '_count' ? RestauranteCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (RestauranteArgs | RestauranteFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'usuario' ? UsuarioGetPayload<S['select'][P]> | null :
        P extends 'plato' ? Array < PlatoGetPayload<S['select'][P]>>  :
        P extends 'comentario' ? Array < ComentarioGetPayload<S['select'][P]>>  :
        P extends '_count' ? RestauranteCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Restaurante ? Restaurante[P] : never
  } 
      : Restaurante


  type RestauranteCountArgs = 
    Omit<RestauranteFindManyArgs, 'select' | 'include'> & {
      select?: RestauranteCountAggregateInputType | true
    }

  export interface RestauranteDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Restaurante that matches the filter.
     * @param {RestauranteFindUniqueArgs} args - Arguments to find a Restaurante
     * @example
     * // Get one Restaurante
     * const restaurante = await prisma.restaurante.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends RestauranteFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, RestauranteFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Restaurante'> extends True ? Prisma__RestauranteClient<RestauranteGetPayload<T>> : Prisma__RestauranteClient<RestauranteGetPayload<T> | null, null>

    /**
     * Find one Restaurante that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {RestauranteFindUniqueOrThrowArgs} args - Arguments to find a Restaurante
     * @example
     * // Get one Restaurante
     * const restaurante = await prisma.restaurante.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends RestauranteFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, RestauranteFindUniqueOrThrowArgs>
    ): Prisma__RestauranteClient<RestauranteGetPayload<T>>

    /**
     * Find the first Restaurante that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RestauranteFindFirstArgs} args - Arguments to find a Restaurante
     * @example
     * // Get one Restaurante
     * const restaurante = await prisma.restaurante.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends RestauranteFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, RestauranteFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Restaurante'> extends True ? Prisma__RestauranteClient<RestauranteGetPayload<T>> : Prisma__RestauranteClient<RestauranteGetPayload<T> | null, null>

    /**
     * Find the first Restaurante that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RestauranteFindFirstOrThrowArgs} args - Arguments to find a Restaurante
     * @example
     * // Get one Restaurante
     * const restaurante = await prisma.restaurante.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends RestauranteFindFirstOrThrowArgs>(
      args?: SelectSubset<T, RestauranteFindFirstOrThrowArgs>
    ): Prisma__RestauranteClient<RestauranteGetPayload<T>>

    /**
     * Find zero or more Restaurantes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RestauranteFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Restaurantes
     * const restaurantes = await prisma.restaurante.findMany()
     * 
     * // Get first 10 Restaurantes
     * const restaurantes = await prisma.restaurante.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const restauranteWithIdOnly = await prisma.restaurante.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends RestauranteFindManyArgs>(
      args?: SelectSubset<T, RestauranteFindManyArgs>
    ): PrismaPromise<Array<RestauranteGetPayload<T>>>

    /**
     * Create a Restaurante.
     * @param {RestauranteCreateArgs} args - Arguments to create a Restaurante.
     * @example
     * // Create one Restaurante
     * const Restaurante = await prisma.restaurante.create({
     *   data: {
     *     // ... data to create a Restaurante
     *   }
     * })
     * 
    **/
    create<T extends RestauranteCreateArgs>(
      args: SelectSubset<T, RestauranteCreateArgs>
    ): Prisma__RestauranteClient<RestauranteGetPayload<T>>

    /**
     * Delete a Restaurante.
     * @param {RestauranteDeleteArgs} args - Arguments to delete one Restaurante.
     * @example
     * // Delete one Restaurante
     * const Restaurante = await prisma.restaurante.delete({
     *   where: {
     *     // ... filter to delete one Restaurante
     *   }
     * })
     * 
    **/
    delete<T extends RestauranteDeleteArgs>(
      args: SelectSubset<T, RestauranteDeleteArgs>
    ): Prisma__RestauranteClient<RestauranteGetPayload<T>>

    /**
     * Update one Restaurante.
     * @param {RestauranteUpdateArgs} args - Arguments to update one Restaurante.
     * @example
     * // Update one Restaurante
     * const restaurante = await prisma.restaurante.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends RestauranteUpdateArgs>(
      args: SelectSubset<T, RestauranteUpdateArgs>
    ): Prisma__RestauranteClient<RestauranteGetPayload<T>>

    /**
     * Delete zero or more Restaurantes.
     * @param {RestauranteDeleteManyArgs} args - Arguments to filter Restaurantes to delete.
     * @example
     * // Delete a few Restaurantes
     * const { count } = await prisma.restaurante.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends RestauranteDeleteManyArgs>(
      args?: SelectSubset<T, RestauranteDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Restaurantes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RestauranteUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Restaurantes
     * const restaurante = await prisma.restaurante.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends RestauranteUpdateManyArgs>(
      args: SelectSubset<T, RestauranteUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Restaurante.
     * @param {RestauranteUpsertArgs} args - Arguments to update or create a Restaurante.
     * @example
     * // Update or create a Restaurante
     * const restaurante = await prisma.restaurante.upsert({
     *   create: {
     *     // ... data to create a Restaurante
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Restaurante we want to update
     *   }
     * })
    **/
    upsert<T extends RestauranteUpsertArgs>(
      args: SelectSubset<T, RestauranteUpsertArgs>
    ): Prisma__RestauranteClient<RestauranteGetPayload<T>>

    /**
     * Count the number of Restaurantes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RestauranteCountArgs} args - Arguments to filter Restaurantes to count.
     * @example
     * // Count the number of Restaurantes
     * const count = await prisma.restaurante.count({
     *   where: {
     *     // ... the filter for the Restaurantes we want to count
     *   }
     * })
    **/
    count<T extends RestauranteCountArgs>(
      args?: Subset<T, RestauranteCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RestauranteCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Restaurante.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RestauranteAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RestauranteAggregateArgs>(args: Subset<T, RestauranteAggregateArgs>): PrismaPromise<GetRestauranteAggregateType<T>>

    /**
     * Group by Restaurante.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RestauranteGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RestauranteGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RestauranteGroupByArgs['orderBy'] }
        : { orderBy?: RestauranteGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RestauranteGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRestauranteGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Restaurante.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__RestauranteClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    usuario<T extends UsuarioArgs= {}>(args?: Subset<T, UsuarioArgs>): Prisma__UsuarioClient<UsuarioGetPayload<T> | Null>;

    plato<T extends Restaurante$platoArgs= {}>(args?: Subset<T, Restaurante$platoArgs>): PrismaPromise<Array<PlatoGetPayload<T>>| Null>;

    comentario<T extends Restaurante$comentarioArgs= {}>(args?: Subset<T, Restaurante$comentarioArgs>): PrismaPromise<Array<ComentarioGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Restaurante base type for findUnique actions
   */
  export type RestauranteFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Restaurante
     */
    select?: RestauranteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RestauranteInclude | null
    /**
     * Filter, which Restaurante to fetch.
     */
    where: RestauranteWhereUniqueInput
  }

  /**
   * Restaurante findUnique
   */
  export interface RestauranteFindUniqueArgs extends RestauranteFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Restaurante findUniqueOrThrow
   */
  export type RestauranteFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Restaurante
     */
    select?: RestauranteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RestauranteInclude | null
    /**
     * Filter, which Restaurante to fetch.
     */
    where: RestauranteWhereUniqueInput
  }


  /**
   * Restaurante base type for findFirst actions
   */
  export type RestauranteFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Restaurante
     */
    select?: RestauranteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RestauranteInclude | null
    /**
     * Filter, which Restaurante to fetch.
     */
    where?: RestauranteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Restaurantes to fetch.
     */
    orderBy?: Enumerable<RestauranteOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Restaurantes.
     */
    cursor?: RestauranteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Restaurantes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Restaurantes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Restaurantes.
     */
    distinct?: Enumerable<RestauranteScalarFieldEnum>
  }

  /**
   * Restaurante findFirst
   */
  export interface RestauranteFindFirstArgs extends RestauranteFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Restaurante findFirstOrThrow
   */
  export type RestauranteFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Restaurante
     */
    select?: RestauranteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RestauranteInclude | null
    /**
     * Filter, which Restaurante to fetch.
     */
    where?: RestauranteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Restaurantes to fetch.
     */
    orderBy?: Enumerable<RestauranteOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Restaurantes.
     */
    cursor?: RestauranteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Restaurantes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Restaurantes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Restaurantes.
     */
    distinct?: Enumerable<RestauranteScalarFieldEnum>
  }


  /**
   * Restaurante findMany
   */
  export type RestauranteFindManyArgs = {
    /**
     * Select specific fields to fetch from the Restaurante
     */
    select?: RestauranteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RestauranteInclude | null
    /**
     * Filter, which Restaurantes to fetch.
     */
    where?: RestauranteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Restaurantes to fetch.
     */
    orderBy?: Enumerable<RestauranteOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Restaurantes.
     */
    cursor?: RestauranteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Restaurantes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Restaurantes.
     */
    skip?: number
    distinct?: Enumerable<RestauranteScalarFieldEnum>
  }


  /**
   * Restaurante create
   */
  export type RestauranteCreateArgs = {
    /**
     * Select specific fields to fetch from the Restaurante
     */
    select?: RestauranteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RestauranteInclude | null
    /**
     * The data needed to create a Restaurante.
     */
    data: XOR<RestauranteCreateInput, RestauranteUncheckedCreateInput>
  }


  /**
   * Restaurante update
   */
  export type RestauranteUpdateArgs = {
    /**
     * Select specific fields to fetch from the Restaurante
     */
    select?: RestauranteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RestauranteInclude | null
    /**
     * The data needed to update a Restaurante.
     */
    data: XOR<RestauranteUpdateInput, RestauranteUncheckedUpdateInput>
    /**
     * Choose, which Restaurante to update.
     */
    where: RestauranteWhereUniqueInput
  }


  /**
   * Restaurante updateMany
   */
  export type RestauranteUpdateManyArgs = {
    /**
     * The data used to update Restaurantes.
     */
    data: XOR<RestauranteUpdateManyMutationInput, RestauranteUncheckedUpdateManyInput>
    /**
     * Filter which Restaurantes to update
     */
    where?: RestauranteWhereInput
  }


  /**
   * Restaurante upsert
   */
  export type RestauranteUpsertArgs = {
    /**
     * Select specific fields to fetch from the Restaurante
     */
    select?: RestauranteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RestauranteInclude | null
    /**
     * The filter to search for the Restaurante to update in case it exists.
     */
    where: RestauranteWhereUniqueInput
    /**
     * In case the Restaurante found by the `where` argument doesn't exist, create a new Restaurante with this data.
     */
    create: XOR<RestauranteCreateInput, RestauranteUncheckedCreateInput>
    /**
     * In case the Restaurante was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RestauranteUpdateInput, RestauranteUncheckedUpdateInput>
  }


  /**
   * Restaurante delete
   */
  export type RestauranteDeleteArgs = {
    /**
     * Select specific fields to fetch from the Restaurante
     */
    select?: RestauranteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RestauranteInclude | null
    /**
     * Filter which Restaurante to delete.
     */
    where: RestauranteWhereUniqueInput
  }


  /**
   * Restaurante deleteMany
   */
  export type RestauranteDeleteManyArgs = {
    /**
     * Filter which Restaurantes to delete
     */
    where?: RestauranteWhereInput
  }


  /**
   * Restaurante.plato
   */
  export type Restaurante$platoArgs = {
    /**
     * Select specific fields to fetch from the Plato
     */
    select?: PlatoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PlatoInclude | null
    where?: PlatoWhereInput
    orderBy?: Enumerable<PlatoOrderByWithRelationInput>
    cursor?: PlatoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<PlatoScalarFieldEnum>
  }


  /**
   * Restaurante.comentario
   */
  export type Restaurante$comentarioArgs = {
    /**
     * Select specific fields to fetch from the Comentario
     */
    select?: ComentarioSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ComentarioInclude | null
    where?: ComentarioWhereInput
    orderBy?: Enumerable<ComentarioOrderByWithRelationInput>
    cursor?: ComentarioWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<ComentarioScalarFieldEnum>
  }


  /**
   * Restaurante without action
   */
  export type RestauranteArgs = {
    /**
     * Select specific fields to fetch from the Restaurante
     */
    select?: RestauranteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RestauranteInclude | null
  }



  /**
   * Model Plato
   */


  export type AggregatePlato = {
    _count: PlatoCountAggregateOutputType | null
    _avg: PlatoAvgAggregateOutputType | null
    _sum: PlatoSumAggregateOutputType | null
    _min: PlatoMinAggregateOutputType | null
    _max: PlatoMaxAggregateOutputType | null
  }

  export type PlatoAvgAggregateOutputType = {
    id: number | null
    precio: number | null
    restaurante_id: number | null
  }

  export type PlatoSumAggregateOutputType = {
    id: number | null
    precio: number | null
    restaurante_id: number | null
  }

  export type PlatoMinAggregateOutputType = {
    id: number | null
    nombre_plato: string | null
    precio: number | null
    imagen: string | null
    disponibilidad: boolean | null
    descripcion: string | null
    restaurante_id: number | null
  }

  export type PlatoMaxAggregateOutputType = {
    id: number | null
    nombre_plato: string | null
    precio: number | null
    imagen: string | null
    disponibilidad: boolean | null
    descripcion: string | null
    restaurante_id: number | null
  }

  export type PlatoCountAggregateOutputType = {
    id: number
    nombre_plato: number
    precio: number
    imagen: number
    disponibilidad: number
    descripcion: number
    restaurante_id: number
    _all: number
  }


  export type PlatoAvgAggregateInputType = {
    id?: true
    precio?: true
    restaurante_id?: true
  }

  export type PlatoSumAggregateInputType = {
    id?: true
    precio?: true
    restaurante_id?: true
  }

  export type PlatoMinAggregateInputType = {
    id?: true
    nombre_plato?: true
    precio?: true
    imagen?: true
    disponibilidad?: true
    descripcion?: true
    restaurante_id?: true
  }

  export type PlatoMaxAggregateInputType = {
    id?: true
    nombre_plato?: true
    precio?: true
    imagen?: true
    disponibilidad?: true
    descripcion?: true
    restaurante_id?: true
  }

  export type PlatoCountAggregateInputType = {
    id?: true
    nombre_plato?: true
    precio?: true
    imagen?: true
    disponibilidad?: true
    descripcion?: true
    restaurante_id?: true
    _all?: true
  }

  export type PlatoAggregateArgs = {
    /**
     * Filter which Plato to aggregate.
     */
    where?: PlatoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Platoes to fetch.
     */
    orderBy?: Enumerable<PlatoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PlatoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Platoes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Platoes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Platoes
    **/
    _count?: true | PlatoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PlatoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PlatoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PlatoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PlatoMaxAggregateInputType
  }

  export type GetPlatoAggregateType<T extends PlatoAggregateArgs> = {
        [P in keyof T & keyof AggregatePlato]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePlato[P]>
      : GetScalarType<T[P], AggregatePlato[P]>
  }




  export type PlatoGroupByArgs = {
    where?: PlatoWhereInput
    orderBy?: Enumerable<PlatoOrderByWithAggregationInput>
    by: PlatoScalarFieldEnum[]
    having?: PlatoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PlatoCountAggregateInputType | true
    _avg?: PlatoAvgAggregateInputType
    _sum?: PlatoSumAggregateInputType
    _min?: PlatoMinAggregateInputType
    _max?: PlatoMaxAggregateInputType
  }


  export type PlatoGroupByOutputType = {
    id: number
    nombre_plato: string
    precio: number
    imagen: string
    disponibilidad: boolean
    descripcion: string
    restaurante_id: number
    _count: PlatoCountAggregateOutputType | null
    _avg: PlatoAvgAggregateOutputType | null
    _sum: PlatoSumAggregateOutputType | null
    _min: PlatoMinAggregateOutputType | null
    _max: PlatoMaxAggregateOutputType | null
  }

  type GetPlatoGroupByPayload<T extends PlatoGroupByArgs> = PrismaPromise<
    Array<
      PickArray<PlatoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PlatoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PlatoGroupByOutputType[P]>
            : GetScalarType<T[P], PlatoGroupByOutputType[P]>
        }
      >
    >


  export type PlatoSelect = {
    id?: boolean
    nombre_plato?: boolean
    precio?: boolean
    imagen?: boolean
    disponibilidad?: boolean
    descripcion?: boolean
    restaurante?: boolean | RestauranteArgs
    restaurante_id?: boolean
  }


  export type PlatoInclude = {
    restaurante?: boolean | RestauranteArgs
  }

  export type PlatoGetPayload<S extends boolean | null | undefined | PlatoArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Plato :
    S extends undefined ? never :
    S extends { include: any } & (PlatoArgs | PlatoFindManyArgs)
    ? Plato  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'restaurante' ? RestauranteGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (PlatoArgs | PlatoFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'restaurante' ? RestauranteGetPayload<S['select'][P]> :  P extends keyof Plato ? Plato[P] : never
  } 
      : Plato


  type PlatoCountArgs = 
    Omit<PlatoFindManyArgs, 'select' | 'include'> & {
      select?: PlatoCountAggregateInputType | true
    }

  export interface PlatoDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Plato that matches the filter.
     * @param {PlatoFindUniqueArgs} args - Arguments to find a Plato
     * @example
     * // Get one Plato
     * const plato = await prisma.plato.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends PlatoFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, PlatoFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Plato'> extends True ? Prisma__PlatoClient<PlatoGetPayload<T>> : Prisma__PlatoClient<PlatoGetPayload<T> | null, null>

    /**
     * Find one Plato that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {PlatoFindUniqueOrThrowArgs} args - Arguments to find a Plato
     * @example
     * // Get one Plato
     * const plato = await prisma.plato.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends PlatoFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, PlatoFindUniqueOrThrowArgs>
    ): Prisma__PlatoClient<PlatoGetPayload<T>>

    /**
     * Find the first Plato that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlatoFindFirstArgs} args - Arguments to find a Plato
     * @example
     * // Get one Plato
     * const plato = await prisma.plato.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends PlatoFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, PlatoFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Plato'> extends True ? Prisma__PlatoClient<PlatoGetPayload<T>> : Prisma__PlatoClient<PlatoGetPayload<T> | null, null>

    /**
     * Find the first Plato that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlatoFindFirstOrThrowArgs} args - Arguments to find a Plato
     * @example
     * // Get one Plato
     * const plato = await prisma.plato.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends PlatoFindFirstOrThrowArgs>(
      args?: SelectSubset<T, PlatoFindFirstOrThrowArgs>
    ): Prisma__PlatoClient<PlatoGetPayload<T>>

    /**
     * Find zero or more Platoes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlatoFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Platoes
     * const platoes = await prisma.plato.findMany()
     * 
     * // Get first 10 Platoes
     * const platoes = await prisma.plato.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const platoWithIdOnly = await prisma.plato.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends PlatoFindManyArgs>(
      args?: SelectSubset<T, PlatoFindManyArgs>
    ): PrismaPromise<Array<PlatoGetPayload<T>>>

    /**
     * Create a Plato.
     * @param {PlatoCreateArgs} args - Arguments to create a Plato.
     * @example
     * // Create one Plato
     * const Plato = await prisma.plato.create({
     *   data: {
     *     // ... data to create a Plato
     *   }
     * })
     * 
    **/
    create<T extends PlatoCreateArgs>(
      args: SelectSubset<T, PlatoCreateArgs>
    ): Prisma__PlatoClient<PlatoGetPayload<T>>

    /**
     * Delete a Plato.
     * @param {PlatoDeleteArgs} args - Arguments to delete one Plato.
     * @example
     * // Delete one Plato
     * const Plato = await prisma.plato.delete({
     *   where: {
     *     // ... filter to delete one Plato
     *   }
     * })
     * 
    **/
    delete<T extends PlatoDeleteArgs>(
      args: SelectSubset<T, PlatoDeleteArgs>
    ): Prisma__PlatoClient<PlatoGetPayload<T>>

    /**
     * Update one Plato.
     * @param {PlatoUpdateArgs} args - Arguments to update one Plato.
     * @example
     * // Update one Plato
     * const plato = await prisma.plato.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends PlatoUpdateArgs>(
      args: SelectSubset<T, PlatoUpdateArgs>
    ): Prisma__PlatoClient<PlatoGetPayload<T>>

    /**
     * Delete zero or more Platoes.
     * @param {PlatoDeleteManyArgs} args - Arguments to filter Platoes to delete.
     * @example
     * // Delete a few Platoes
     * const { count } = await prisma.plato.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends PlatoDeleteManyArgs>(
      args?: SelectSubset<T, PlatoDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Platoes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlatoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Platoes
     * const plato = await prisma.plato.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends PlatoUpdateManyArgs>(
      args: SelectSubset<T, PlatoUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Plato.
     * @param {PlatoUpsertArgs} args - Arguments to update or create a Plato.
     * @example
     * // Update or create a Plato
     * const plato = await prisma.plato.upsert({
     *   create: {
     *     // ... data to create a Plato
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Plato we want to update
     *   }
     * })
    **/
    upsert<T extends PlatoUpsertArgs>(
      args: SelectSubset<T, PlatoUpsertArgs>
    ): Prisma__PlatoClient<PlatoGetPayload<T>>

    /**
     * Count the number of Platoes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlatoCountArgs} args - Arguments to filter Platoes to count.
     * @example
     * // Count the number of Platoes
     * const count = await prisma.plato.count({
     *   where: {
     *     // ... the filter for the Platoes we want to count
     *   }
     * })
    **/
    count<T extends PlatoCountArgs>(
      args?: Subset<T, PlatoCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PlatoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Plato.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlatoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PlatoAggregateArgs>(args: Subset<T, PlatoAggregateArgs>): PrismaPromise<GetPlatoAggregateType<T>>

    /**
     * Group by Plato.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlatoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PlatoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PlatoGroupByArgs['orderBy'] }
        : { orderBy?: PlatoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PlatoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPlatoGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Plato.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__PlatoClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    restaurante<T extends RestauranteArgs= {}>(args?: Subset<T, RestauranteArgs>): Prisma__RestauranteClient<RestauranteGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Plato base type for findUnique actions
   */
  export type PlatoFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Plato
     */
    select?: PlatoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PlatoInclude | null
    /**
     * Filter, which Plato to fetch.
     */
    where: PlatoWhereUniqueInput
  }

  /**
   * Plato findUnique
   */
  export interface PlatoFindUniqueArgs extends PlatoFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Plato findUniqueOrThrow
   */
  export type PlatoFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Plato
     */
    select?: PlatoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PlatoInclude | null
    /**
     * Filter, which Plato to fetch.
     */
    where: PlatoWhereUniqueInput
  }


  /**
   * Plato base type for findFirst actions
   */
  export type PlatoFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Plato
     */
    select?: PlatoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PlatoInclude | null
    /**
     * Filter, which Plato to fetch.
     */
    where?: PlatoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Platoes to fetch.
     */
    orderBy?: Enumerable<PlatoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Platoes.
     */
    cursor?: PlatoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Platoes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Platoes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Platoes.
     */
    distinct?: Enumerable<PlatoScalarFieldEnum>
  }

  /**
   * Plato findFirst
   */
  export interface PlatoFindFirstArgs extends PlatoFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Plato findFirstOrThrow
   */
  export type PlatoFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Plato
     */
    select?: PlatoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PlatoInclude | null
    /**
     * Filter, which Plato to fetch.
     */
    where?: PlatoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Platoes to fetch.
     */
    orderBy?: Enumerable<PlatoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Platoes.
     */
    cursor?: PlatoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Platoes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Platoes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Platoes.
     */
    distinct?: Enumerable<PlatoScalarFieldEnum>
  }


  /**
   * Plato findMany
   */
  export type PlatoFindManyArgs = {
    /**
     * Select specific fields to fetch from the Plato
     */
    select?: PlatoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PlatoInclude | null
    /**
     * Filter, which Platoes to fetch.
     */
    where?: PlatoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Platoes to fetch.
     */
    orderBy?: Enumerable<PlatoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Platoes.
     */
    cursor?: PlatoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Platoes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Platoes.
     */
    skip?: number
    distinct?: Enumerable<PlatoScalarFieldEnum>
  }


  /**
   * Plato create
   */
  export type PlatoCreateArgs = {
    /**
     * Select specific fields to fetch from the Plato
     */
    select?: PlatoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PlatoInclude | null
    /**
     * The data needed to create a Plato.
     */
    data: XOR<PlatoCreateInput, PlatoUncheckedCreateInput>
  }


  /**
   * Plato update
   */
  export type PlatoUpdateArgs = {
    /**
     * Select specific fields to fetch from the Plato
     */
    select?: PlatoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PlatoInclude | null
    /**
     * The data needed to update a Plato.
     */
    data: XOR<PlatoUpdateInput, PlatoUncheckedUpdateInput>
    /**
     * Choose, which Plato to update.
     */
    where: PlatoWhereUniqueInput
  }


  /**
   * Plato updateMany
   */
  export type PlatoUpdateManyArgs = {
    /**
     * The data used to update Platoes.
     */
    data: XOR<PlatoUpdateManyMutationInput, PlatoUncheckedUpdateManyInput>
    /**
     * Filter which Platoes to update
     */
    where?: PlatoWhereInput
  }


  /**
   * Plato upsert
   */
  export type PlatoUpsertArgs = {
    /**
     * Select specific fields to fetch from the Plato
     */
    select?: PlatoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PlatoInclude | null
    /**
     * The filter to search for the Plato to update in case it exists.
     */
    where: PlatoWhereUniqueInput
    /**
     * In case the Plato found by the `where` argument doesn't exist, create a new Plato with this data.
     */
    create: XOR<PlatoCreateInput, PlatoUncheckedCreateInput>
    /**
     * In case the Plato was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PlatoUpdateInput, PlatoUncheckedUpdateInput>
  }


  /**
   * Plato delete
   */
  export type PlatoDeleteArgs = {
    /**
     * Select specific fields to fetch from the Plato
     */
    select?: PlatoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PlatoInclude | null
    /**
     * Filter which Plato to delete.
     */
    where: PlatoWhereUniqueInput
  }


  /**
   * Plato deleteMany
   */
  export type PlatoDeleteManyArgs = {
    /**
     * Filter which Platoes to delete
     */
    where?: PlatoWhereInput
  }


  /**
   * Plato without action
   */
  export type PlatoArgs = {
    /**
     * Select specific fields to fetch from the Plato
     */
    select?: PlatoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PlatoInclude | null
  }



  /**
   * Model Comentario
   */


  export type AggregateComentario = {
    _count: ComentarioCountAggregateOutputType | null
    _avg: ComentarioAvgAggregateOutputType | null
    _sum: ComentarioSumAggregateOutputType | null
    _min: ComentarioMinAggregateOutputType | null
    _max: ComentarioMaxAggregateOutputType | null
  }

  export type ComentarioAvgAggregateOutputType = {
    id: number | null
    calificacion: number | null
    restaurante_id: number | null
  }

  export type ComentarioSumAggregateOutputType = {
    id: number | null
    calificacion: number | null
    restaurante_id: number | null
  }

  export type ComentarioMinAggregateOutputType = {
    id: number | null
    comentario: string | null
    calificacion: number | null
    restaurante_id: number | null
  }

  export type ComentarioMaxAggregateOutputType = {
    id: number | null
    comentario: string | null
    calificacion: number | null
    restaurante_id: number | null
  }

  export type ComentarioCountAggregateOutputType = {
    id: number
    comentario: number
    calificacion: number
    restaurante_id: number
    _all: number
  }


  export type ComentarioAvgAggregateInputType = {
    id?: true
    calificacion?: true
    restaurante_id?: true
  }

  export type ComentarioSumAggregateInputType = {
    id?: true
    calificacion?: true
    restaurante_id?: true
  }

  export type ComentarioMinAggregateInputType = {
    id?: true
    comentario?: true
    calificacion?: true
    restaurante_id?: true
  }

  export type ComentarioMaxAggregateInputType = {
    id?: true
    comentario?: true
    calificacion?: true
    restaurante_id?: true
  }

  export type ComentarioCountAggregateInputType = {
    id?: true
    comentario?: true
    calificacion?: true
    restaurante_id?: true
    _all?: true
  }

  export type ComentarioAggregateArgs = {
    /**
     * Filter which Comentario to aggregate.
     */
    where?: ComentarioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Comentarios to fetch.
     */
    orderBy?: Enumerable<ComentarioOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ComentarioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Comentarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Comentarios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Comentarios
    **/
    _count?: true | ComentarioCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ComentarioAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ComentarioSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ComentarioMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ComentarioMaxAggregateInputType
  }

  export type GetComentarioAggregateType<T extends ComentarioAggregateArgs> = {
        [P in keyof T & keyof AggregateComentario]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateComentario[P]>
      : GetScalarType<T[P], AggregateComentario[P]>
  }




  export type ComentarioGroupByArgs = {
    where?: ComentarioWhereInput
    orderBy?: Enumerable<ComentarioOrderByWithAggregationInput>
    by: ComentarioScalarFieldEnum[]
    having?: ComentarioScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ComentarioCountAggregateInputType | true
    _avg?: ComentarioAvgAggregateInputType
    _sum?: ComentarioSumAggregateInputType
    _min?: ComentarioMinAggregateInputType
    _max?: ComentarioMaxAggregateInputType
  }


  export type ComentarioGroupByOutputType = {
    id: number
    comentario: string
    calificacion: number
    restaurante_id: number
    _count: ComentarioCountAggregateOutputType | null
    _avg: ComentarioAvgAggregateOutputType | null
    _sum: ComentarioSumAggregateOutputType | null
    _min: ComentarioMinAggregateOutputType | null
    _max: ComentarioMaxAggregateOutputType | null
  }

  type GetComentarioGroupByPayload<T extends ComentarioGroupByArgs> = PrismaPromise<
    Array<
      PickArray<ComentarioGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ComentarioGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ComentarioGroupByOutputType[P]>
            : GetScalarType<T[P], ComentarioGroupByOutputType[P]>
        }
      >
    >


  export type ComentarioSelect = {
    id?: boolean
    comentario?: boolean
    calificacion?: boolean
    restaurante?: boolean | RestauranteArgs
    restaurante_id?: boolean
  }


  export type ComentarioInclude = {
    restaurante?: boolean | RestauranteArgs
  }

  export type ComentarioGetPayload<S extends boolean | null | undefined | ComentarioArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Comentario :
    S extends undefined ? never :
    S extends { include: any } & (ComentarioArgs | ComentarioFindManyArgs)
    ? Comentario  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'restaurante' ? RestauranteGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (ComentarioArgs | ComentarioFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'restaurante' ? RestauranteGetPayload<S['select'][P]> :  P extends keyof Comentario ? Comentario[P] : never
  } 
      : Comentario


  type ComentarioCountArgs = 
    Omit<ComentarioFindManyArgs, 'select' | 'include'> & {
      select?: ComentarioCountAggregateInputType | true
    }

  export interface ComentarioDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Comentario that matches the filter.
     * @param {ComentarioFindUniqueArgs} args - Arguments to find a Comentario
     * @example
     * // Get one Comentario
     * const comentario = await prisma.comentario.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ComentarioFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ComentarioFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Comentario'> extends True ? Prisma__ComentarioClient<ComentarioGetPayload<T>> : Prisma__ComentarioClient<ComentarioGetPayload<T> | null, null>

    /**
     * Find one Comentario that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ComentarioFindUniqueOrThrowArgs} args - Arguments to find a Comentario
     * @example
     * // Get one Comentario
     * const comentario = await prisma.comentario.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ComentarioFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, ComentarioFindUniqueOrThrowArgs>
    ): Prisma__ComentarioClient<ComentarioGetPayload<T>>

    /**
     * Find the first Comentario that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ComentarioFindFirstArgs} args - Arguments to find a Comentario
     * @example
     * // Get one Comentario
     * const comentario = await prisma.comentario.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ComentarioFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ComentarioFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Comentario'> extends True ? Prisma__ComentarioClient<ComentarioGetPayload<T>> : Prisma__ComentarioClient<ComentarioGetPayload<T> | null, null>

    /**
     * Find the first Comentario that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ComentarioFindFirstOrThrowArgs} args - Arguments to find a Comentario
     * @example
     * // Get one Comentario
     * const comentario = await prisma.comentario.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ComentarioFindFirstOrThrowArgs>(
      args?: SelectSubset<T, ComentarioFindFirstOrThrowArgs>
    ): Prisma__ComentarioClient<ComentarioGetPayload<T>>

    /**
     * Find zero or more Comentarios that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ComentarioFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Comentarios
     * const comentarios = await prisma.comentario.findMany()
     * 
     * // Get first 10 Comentarios
     * const comentarios = await prisma.comentario.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const comentarioWithIdOnly = await prisma.comentario.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ComentarioFindManyArgs>(
      args?: SelectSubset<T, ComentarioFindManyArgs>
    ): PrismaPromise<Array<ComentarioGetPayload<T>>>

    /**
     * Create a Comentario.
     * @param {ComentarioCreateArgs} args - Arguments to create a Comentario.
     * @example
     * // Create one Comentario
     * const Comentario = await prisma.comentario.create({
     *   data: {
     *     // ... data to create a Comentario
     *   }
     * })
     * 
    **/
    create<T extends ComentarioCreateArgs>(
      args: SelectSubset<T, ComentarioCreateArgs>
    ): Prisma__ComentarioClient<ComentarioGetPayload<T>>

    /**
     * Delete a Comentario.
     * @param {ComentarioDeleteArgs} args - Arguments to delete one Comentario.
     * @example
     * // Delete one Comentario
     * const Comentario = await prisma.comentario.delete({
     *   where: {
     *     // ... filter to delete one Comentario
     *   }
     * })
     * 
    **/
    delete<T extends ComentarioDeleteArgs>(
      args: SelectSubset<T, ComentarioDeleteArgs>
    ): Prisma__ComentarioClient<ComentarioGetPayload<T>>

    /**
     * Update one Comentario.
     * @param {ComentarioUpdateArgs} args - Arguments to update one Comentario.
     * @example
     * // Update one Comentario
     * const comentario = await prisma.comentario.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ComentarioUpdateArgs>(
      args: SelectSubset<T, ComentarioUpdateArgs>
    ): Prisma__ComentarioClient<ComentarioGetPayload<T>>

    /**
     * Delete zero or more Comentarios.
     * @param {ComentarioDeleteManyArgs} args - Arguments to filter Comentarios to delete.
     * @example
     * // Delete a few Comentarios
     * const { count } = await prisma.comentario.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ComentarioDeleteManyArgs>(
      args?: SelectSubset<T, ComentarioDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Comentarios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ComentarioUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Comentarios
     * const comentario = await prisma.comentario.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ComentarioUpdateManyArgs>(
      args: SelectSubset<T, ComentarioUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Comentario.
     * @param {ComentarioUpsertArgs} args - Arguments to update or create a Comentario.
     * @example
     * // Update or create a Comentario
     * const comentario = await prisma.comentario.upsert({
     *   create: {
     *     // ... data to create a Comentario
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Comentario we want to update
     *   }
     * })
    **/
    upsert<T extends ComentarioUpsertArgs>(
      args: SelectSubset<T, ComentarioUpsertArgs>
    ): Prisma__ComentarioClient<ComentarioGetPayload<T>>

    /**
     * Count the number of Comentarios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ComentarioCountArgs} args - Arguments to filter Comentarios to count.
     * @example
     * // Count the number of Comentarios
     * const count = await prisma.comentario.count({
     *   where: {
     *     // ... the filter for the Comentarios we want to count
     *   }
     * })
    **/
    count<T extends ComentarioCountArgs>(
      args?: Subset<T, ComentarioCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ComentarioCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Comentario.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ComentarioAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ComentarioAggregateArgs>(args: Subset<T, ComentarioAggregateArgs>): PrismaPromise<GetComentarioAggregateType<T>>

    /**
     * Group by Comentario.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ComentarioGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ComentarioGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ComentarioGroupByArgs['orderBy'] }
        : { orderBy?: ComentarioGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ComentarioGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetComentarioGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Comentario.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ComentarioClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    restaurante<T extends RestauranteArgs= {}>(args?: Subset<T, RestauranteArgs>): Prisma__RestauranteClient<RestauranteGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Comentario base type for findUnique actions
   */
  export type ComentarioFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Comentario
     */
    select?: ComentarioSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ComentarioInclude | null
    /**
     * Filter, which Comentario to fetch.
     */
    where: ComentarioWhereUniqueInput
  }

  /**
   * Comentario findUnique
   */
  export interface ComentarioFindUniqueArgs extends ComentarioFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Comentario findUniqueOrThrow
   */
  export type ComentarioFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Comentario
     */
    select?: ComentarioSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ComentarioInclude | null
    /**
     * Filter, which Comentario to fetch.
     */
    where: ComentarioWhereUniqueInput
  }


  /**
   * Comentario base type for findFirst actions
   */
  export type ComentarioFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Comentario
     */
    select?: ComentarioSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ComentarioInclude | null
    /**
     * Filter, which Comentario to fetch.
     */
    where?: ComentarioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Comentarios to fetch.
     */
    orderBy?: Enumerable<ComentarioOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Comentarios.
     */
    cursor?: ComentarioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Comentarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Comentarios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Comentarios.
     */
    distinct?: Enumerable<ComentarioScalarFieldEnum>
  }

  /**
   * Comentario findFirst
   */
  export interface ComentarioFindFirstArgs extends ComentarioFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Comentario findFirstOrThrow
   */
  export type ComentarioFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Comentario
     */
    select?: ComentarioSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ComentarioInclude | null
    /**
     * Filter, which Comentario to fetch.
     */
    where?: ComentarioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Comentarios to fetch.
     */
    orderBy?: Enumerable<ComentarioOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Comentarios.
     */
    cursor?: ComentarioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Comentarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Comentarios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Comentarios.
     */
    distinct?: Enumerable<ComentarioScalarFieldEnum>
  }


  /**
   * Comentario findMany
   */
  export type ComentarioFindManyArgs = {
    /**
     * Select specific fields to fetch from the Comentario
     */
    select?: ComentarioSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ComentarioInclude | null
    /**
     * Filter, which Comentarios to fetch.
     */
    where?: ComentarioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Comentarios to fetch.
     */
    orderBy?: Enumerable<ComentarioOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Comentarios.
     */
    cursor?: ComentarioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Comentarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Comentarios.
     */
    skip?: number
    distinct?: Enumerable<ComentarioScalarFieldEnum>
  }


  /**
   * Comentario create
   */
  export type ComentarioCreateArgs = {
    /**
     * Select specific fields to fetch from the Comentario
     */
    select?: ComentarioSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ComentarioInclude | null
    /**
     * The data needed to create a Comentario.
     */
    data: XOR<ComentarioCreateInput, ComentarioUncheckedCreateInput>
  }


  /**
   * Comentario update
   */
  export type ComentarioUpdateArgs = {
    /**
     * Select specific fields to fetch from the Comentario
     */
    select?: ComentarioSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ComentarioInclude | null
    /**
     * The data needed to update a Comentario.
     */
    data: XOR<ComentarioUpdateInput, ComentarioUncheckedUpdateInput>
    /**
     * Choose, which Comentario to update.
     */
    where: ComentarioWhereUniqueInput
  }


  /**
   * Comentario updateMany
   */
  export type ComentarioUpdateManyArgs = {
    /**
     * The data used to update Comentarios.
     */
    data: XOR<ComentarioUpdateManyMutationInput, ComentarioUncheckedUpdateManyInput>
    /**
     * Filter which Comentarios to update
     */
    where?: ComentarioWhereInput
  }


  /**
   * Comentario upsert
   */
  export type ComentarioUpsertArgs = {
    /**
     * Select specific fields to fetch from the Comentario
     */
    select?: ComentarioSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ComentarioInclude | null
    /**
     * The filter to search for the Comentario to update in case it exists.
     */
    where: ComentarioWhereUniqueInput
    /**
     * In case the Comentario found by the `where` argument doesn't exist, create a new Comentario with this data.
     */
    create: XOR<ComentarioCreateInput, ComentarioUncheckedCreateInput>
    /**
     * In case the Comentario was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ComentarioUpdateInput, ComentarioUncheckedUpdateInput>
  }


  /**
   * Comentario delete
   */
  export type ComentarioDeleteArgs = {
    /**
     * Select specific fields to fetch from the Comentario
     */
    select?: ComentarioSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ComentarioInclude | null
    /**
     * Filter which Comentario to delete.
     */
    where: ComentarioWhereUniqueInput
  }


  /**
   * Comentario deleteMany
   */
  export type ComentarioDeleteManyArgs = {
    /**
     * Filter which Comentarios to delete
     */
    where?: ComentarioWhereInput
  }


  /**
   * Comentario without action
   */
  export type ComentarioArgs = {
    /**
     * Select specific fields to fetch from the Comentario
     */
    select?: ComentarioSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ComentarioInclude | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const ComentarioScalarFieldEnum: {
    id: 'id',
    comentario: 'comentario',
    calificacion: 'calificacion',
    restaurante_id: 'restaurante_id'
  };

  export type ComentarioScalarFieldEnum = (typeof ComentarioScalarFieldEnum)[keyof typeof ComentarioScalarFieldEnum]


  export const PlatoScalarFieldEnum: {
    id: 'id',
    nombre_plato: 'nombre_plato',
    precio: 'precio',
    imagen: 'imagen',
    disponibilidad: 'disponibilidad',
    descripcion: 'descripcion',
    restaurante_id: 'restaurante_id'
  };

  export type PlatoScalarFieldEnum = (typeof PlatoScalarFieldEnum)[keyof typeof PlatoScalarFieldEnum]


  export const RestauranteScalarFieldEnum: {
    id: 'id',
    nombre: 'nombre',
    departamento: 'departamento',
    telefono: 'telefono',
    referencia: 'referencia',
    distrito: 'distrito',
    provincia: 'provincia',
    usuarioId: 'usuarioId',
    tipo: 'tipo',
    apertura: 'apertura',
    cierre: 'cierre',
    fech_creacion: 'fech_creacion',
    calificacion: 'calificacion',
    descripcion: 'descripcion'
  };

  export type RestauranteScalarFieldEnum = (typeof RestauranteScalarFieldEnum)[keyof typeof RestauranteScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const TransactionIsolationLevel: {
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UsuarioScalarFieldEnum: {
    id: 'id',
    nombre: 'nombre',
    dni: 'dni',
    telefono: 'telefono',
    correo: 'correo',
    contrasena: 'contrasena',
    es_propietario: 'es_propietario'
  };

  export type UsuarioScalarFieldEnum = (typeof UsuarioScalarFieldEnum)[keyof typeof UsuarioScalarFieldEnum]


  /**
   * Deep Input Types
   */


  export type UsuarioWhereInput = {
    AND?: Enumerable<UsuarioWhereInput>
    OR?: Enumerable<UsuarioWhereInput>
    NOT?: Enumerable<UsuarioWhereInput>
    id?: IntFilter | number
    nombre?: StringFilter | string
    dni?: IntFilter | number
    telefono?: IntFilter | number
    correo?: StringFilter | string
    contrasena?: StringFilter | string
    es_propietario?: BoolFilter | boolean
    restaurante?: RestauranteListRelationFilter
  }

  export type UsuarioOrderByWithRelationInput = {
    id?: SortOrder
    nombre?: SortOrder
    dni?: SortOrder
    telefono?: SortOrder
    correo?: SortOrder
    contrasena?: SortOrder
    es_propietario?: SortOrder
    restaurante?: RestauranteOrderByRelationAggregateInput
  }

  export type UsuarioWhereUniqueInput = {
    id?: number
    correo?: string
  }

  export type UsuarioOrderByWithAggregationInput = {
    id?: SortOrder
    nombre?: SortOrder
    dni?: SortOrder
    telefono?: SortOrder
    correo?: SortOrder
    contrasena?: SortOrder
    es_propietario?: SortOrder
    _count?: UsuarioCountOrderByAggregateInput
    _avg?: UsuarioAvgOrderByAggregateInput
    _max?: UsuarioMaxOrderByAggregateInput
    _min?: UsuarioMinOrderByAggregateInput
    _sum?: UsuarioSumOrderByAggregateInput
  }

  export type UsuarioScalarWhereWithAggregatesInput = {
    AND?: Enumerable<UsuarioScalarWhereWithAggregatesInput>
    OR?: Enumerable<UsuarioScalarWhereWithAggregatesInput>
    NOT?: Enumerable<UsuarioScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    nombre?: StringWithAggregatesFilter | string
    dni?: IntWithAggregatesFilter | number
    telefono?: IntWithAggregatesFilter | number
    correo?: StringWithAggregatesFilter | string
    contrasena?: StringWithAggregatesFilter | string
    es_propietario?: BoolWithAggregatesFilter | boolean
  }

  export type RestauranteWhereInput = {
    AND?: Enumerable<RestauranteWhereInput>
    OR?: Enumerable<RestauranteWhereInput>
    NOT?: Enumerable<RestauranteWhereInput>
    id?: IntFilter | number
    nombre?: StringFilter | string
    departamento?: StringFilter | string
    telefono?: IntFilter | number
    referencia?: StringFilter | string
    distrito?: StringFilter | string
    provincia?: StringFilter | string
    usuario?: XOR<UsuarioRelationFilter, UsuarioWhereInput> | null
    usuarioId?: IntNullableFilter | number | null
    tipo?: StringFilter | string
    apertura?: DateTimeFilter | Date | string
    cierre?: DateTimeFilter | Date | string
    fech_creacion?: DateTimeFilter | Date | string
    calificacion?: FloatFilter | number
    descripcion?: StringFilter | string
    plato?: PlatoListRelationFilter
    comentario?: ComentarioListRelationFilter
  }

  export type RestauranteOrderByWithRelationInput = {
    id?: SortOrder
    nombre?: SortOrder
    departamento?: SortOrder
    telefono?: SortOrder
    referencia?: SortOrder
    distrito?: SortOrder
    provincia?: SortOrder
    usuario?: UsuarioOrderByWithRelationInput
    usuarioId?: SortOrder
    tipo?: SortOrder
    apertura?: SortOrder
    cierre?: SortOrder
    fech_creacion?: SortOrder
    calificacion?: SortOrder
    descripcion?: SortOrder
    plato?: PlatoOrderByRelationAggregateInput
    comentario?: ComentarioOrderByRelationAggregateInput
  }

  export type RestauranteWhereUniqueInput = {
    id?: number
  }

  export type RestauranteOrderByWithAggregationInput = {
    id?: SortOrder
    nombre?: SortOrder
    departamento?: SortOrder
    telefono?: SortOrder
    referencia?: SortOrder
    distrito?: SortOrder
    provincia?: SortOrder
    usuarioId?: SortOrder
    tipo?: SortOrder
    apertura?: SortOrder
    cierre?: SortOrder
    fech_creacion?: SortOrder
    calificacion?: SortOrder
    descripcion?: SortOrder
    _count?: RestauranteCountOrderByAggregateInput
    _avg?: RestauranteAvgOrderByAggregateInput
    _max?: RestauranteMaxOrderByAggregateInput
    _min?: RestauranteMinOrderByAggregateInput
    _sum?: RestauranteSumOrderByAggregateInput
  }

  export type RestauranteScalarWhereWithAggregatesInput = {
    AND?: Enumerable<RestauranteScalarWhereWithAggregatesInput>
    OR?: Enumerable<RestauranteScalarWhereWithAggregatesInput>
    NOT?: Enumerable<RestauranteScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    nombre?: StringWithAggregatesFilter | string
    departamento?: StringWithAggregatesFilter | string
    telefono?: IntWithAggregatesFilter | number
    referencia?: StringWithAggregatesFilter | string
    distrito?: StringWithAggregatesFilter | string
    provincia?: StringWithAggregatesFilter | string
    usuarioId?: IntNullableWithAggregatesFilter | number | null
    tipo?: StringWithAggregatesFilter | string
    apertura?: DateTimeWithAggregatesFilter | Date | string
    cierre?: DateTimeWithAggregatesFilter | Date | string
    fech_creacion?: DateTimeWithAggregatesFilter | Date | string
    calificacion?: FloatWithAggregatesFilter | number
    descripcion?: StringWithAggregatesFilter | string
  }

  export type PlatoWhereInput = {
    AND?: Enumerable<PlatoWhereInput>
    OR?: Enumerable<PlatoWhereInput>
    NOT?: Enumerable<PlatoWhereInput>
    id?: IntFilter | number
    nombre_plato?: StringFilter | string
    precio?: FloatFilter | number
    imagen?: StringFilter | string
    disponibilidad?: BoolFilter | boolean
    descripcion?: StringFilter | string
    restaurante?: XOR<RestauranteRelationFilter, RestauranteWhereInput>
    restaurante_id?: IntFilter | number
  }

  export type PlatoOrderByWithRelationInput = {
    id?: SortOrder
    nombre_plato?: SortOrder
    precio?: SortOrder
    imagen?: SortOrder
    disponibilidad?: SortOrder
    descripcion?: SortOrder
    restaurante?: RestauranteOrderByWithRelationInput
    restaurante_id?: SortOrder
  }

  export type PlatoWhereUniqueInput = {
    id?: number
  }

  export type PlatoOrderByWithAggregationInput = {
    id?: SortOrder
    nombre_plato?: SortOrder
    precio?: SortOrder
    imagen?: SortOrder
    disponibilidad?: SortOrder
    descripcion?: SortOrder
    restaurante_id?: SortOrder
    _count?: PlatoCountOrderByAggregateInput
    _avg?: PlatoAvgOrderByAggregateInput
    _max?: PlatoMaxOrderByAggregateInput
    _min?: PlatoMinOrderByAggregateInput
    _sum?: PlatoSumOrderByAggregateInput
  }

  export type PlatoScalarWhereWithAggregatesInput = {
    AND?: Enumerable<PlatoScalarWhereWithAggregatesInput>
    OR?: Enumerable<PlatoScalarWhereWithAggregatesInput>
    NOT?: Enumerable<PlatoScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    nombre_plato?: StringWithAggregatesFilter | string
    precio?: FloatWithAggregatesFilter | number
    imagen?: StringWithAggregatesFilter | string
    disponibilidad?: BoolWithAggregatesFilter | boolean
    descripcion?: StringWithAggregatesFilter | string
    restaurante_id?: IntWithAggregatesFilter | number
  }

  export type ComentarioWhereInput = {
    AND?: Enumerable<ComentarioWhereInput>
    OR?: Enumerable<ComentarioWhereInput>
    NOT?: Enumerable<ComentarioWhereInput>
    id?: IntFilter | number
    comentario?: StringFilter | string
    calificacion?: IntFilter | number
    restaurante?: XOR<RestauranteRelationFilter, RestauranteWhereInput>
    restaurante_id?: IntFilter | number
  }

  export type ComentarioOrderByWithRelationInput = {
    id?: SortOrder
    comentario?: SortOrder
    calificacion?: SortOrder
    restaurante?: RestauranteOrderByWithRelationInput
    restaurante_id?: SortOrder
  }

  export type ComentarioWhereUniqueInput = {
    id?: number
  }

  export type ComentarioOrderByWithAggregationInput = {
    id?: SortOrder
    comentario?: SortOrder
    calificacion?: SortOrder
    restaurante_id?: SortOrder
    _count?: ComentarioCountOrderByAggregateInput
    _avg?: ComentarioAvgOrderByAggregateInput
    _max?: ComentarioMaxOrderByAggregateInput
    _min?: ComentarioMinOrderByAggregateInput
    _sum?: ComentarioSumOrderByAggregateInput
  }

  export type ComentarioScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ComentarioScalarWhereWithAggregatesInput>
    OR?: Enumerable<ComentarioScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ComentarioScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    comentario?: StringWithAggregatesFilter | string
    calificacion?: IntWithAggregatesFilter | number
    restaurante_id?: IntWithAggregatesFilter | number
  }

  export type UsuarioCreateInput = {
    nombre: string
    dni: number
    telefono: number
    correo: string
    contrasena: string
    es_propietario: boolean
    restaurante?: RestauranteCreateNestedManyWithoutUsuarioInput
  }

  export type UsuarioUncheckedCreateInput = {
    id?: number
    nombre: string
    dni: number
    telefono: number
    correo: string
    contrasena: string
    es_propietario: boolean
    restaurante?: RestauranteUncheckedCreateNestedManyWithoutUsuarioInput
  }

  export type UsuarioUpdateInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    dni?: IntFieldUpdateOperationsInput | number
    telefono?: IntFieldUpdateOperationsInput | number
    correo?: StringFieldUpdateOperationsInput | string
    contrasena?: StringFieldUpdateOperationsInput | string
    es_propietario?: BoolFieldUpdateOperationsInput | boolean
    restaurante?: RestauranteUpdateManyWithoutUsuarioNestedInput
  }

  export type UsuarioUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    dni?: IntFieldUpdateOperationsInput | number
    telefono?: IntFieldUpdateOperationsInput | number
    correo?: StringFieldUpdateOperationsInput | string
    contrasena?: StringFieldUpdateOperationsInput | string
    es_propietario?: BoolFieldUpdateOperationsInput | boolean
    restaurante?: RestauranteUncheckedUpdateManyWithoutUsuarioNestedInput
  }

  export type UsuarioUpdateManyMutationInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    dni?: IntFieldUpdateOperationsInput | number
    telefono?: IntFieldUpdateOperationsInput | number
    correo?: StringFieldUpdateOperationsInput | string
    contrasena?: StringFieldUpdateOperationsInput | string
    es_propietario?: BoolFieldUpdateOperationsInput | boolean
  }

  export type UsuarioUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    dni?: IntFieldUpdateOperationsInput | number
    telefono?: IntFieldUpdateOperationsInput | number
    correo?: StringFieldUpdateOperationsInput | string
    contrasena?: StringFieldUpdateOperationsInput | string
    es_propietario?: BoolFieldUpdateOperationsInput | boolean
  }

  export type RestauranteCreateInput = {
    nombre: string
    departamento: string
    telefono: number
    referencia: string
    distrito: string
    provincia: string
    usuario?: UsuarioCreateNestedOneWithoutRestauranteInput
    tipo: string
    apertura: Date | string
    cierre: Date | string
    fech_creacion: Date | string
    calificacion: number
    descripcion: string
    plato?: PlatoCreateNestedManyWithoutRestauranteInput
    comentario?: ComentarioCreateNestedManyWithoutRestauranteInput
  }

  export type RestauranteUncheckedCreateInput = {
    id?: number
    nombre: string
    departamento: string
    telefono: number
    referencia: string
    distrito: string
    provincia: string
    usuarioId?: number | null
    tipo: string
    apertura: Date | string
    cierre: Date | string
    fech_creacion: Date | string
    calificacion: number
    descripcion: string
    plato?: PlatoUncheckedCreateNestedManyWithoutRestauranteInput
    comentario?: ComentarioUncheckedCreateNestedManyWithoutRestauranteInput
  }

  export type RestauranteUpdateInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    departamento?: StringFieldUpdateOperationsInput | string
    telefono?: IntFieldUpdateOperationsInput | number
    referencia?: StringFieldUpdateOperationsInput | string
    distrito?: StringFieldUpdateOperationsInput | string
    provincia?: StringFieldUpdateOperationsInput | string
    usuario?: UsuarioUpdateOneWithoutRestauranteNestedInput
    tipo?: StringFieldUpdateOperationsInput | string
    apertura?: DateTimeFieldUpdateOperationsInput | Date | string
    cierre?: DateTimeFieldUpdateOperationsInput | Date | string
    fech_creacion?: DateTimeFieldUpdateOperationsInput | Date | string
    calificacion?: FloatFieldUpdateOperationsInput | number
    descripcion?: StringFieldUpdateOperationsInput | string
    plato?: PlatoUpdateManyWithoutRestauranteNestedInput
    comentario?: ComentarioUpdateManyWithoutRestauranteNestedInput
  }

  export type RestauranteUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    departamento?: StringFieldUpdateOperationsInput | string
    telefono?: IntFieldUpdateOperationsInput | number
    referencia?: StringFieldUpdateOperationsInput | string
    distrito?: StringFieldUpdateOperationsInput | string
    provincia?: StringFieldUpdateOperationsInput | string
    usuarioId?: NullableIntFieldUpdateOperationsInput | number | null
    tipo?: StringFieldUpdateOperationsInput | string
    apertura?: DateTimeFieldUpdateOperationsInput | Date | string
    cierre?: DateTimeFieldUpdateOperationsInput | Date | string
    fech_creacion?: DateTimeFieldUpdateOperationsInput | Date | string
    calificacion?: FloatFieldUpdateOperationsInput | number
    descripcion?: StringFieldUpdateOperationsInput | string
    plato?: PlatoUncheckedUpdateManyWithoutRestauranteNestedInput
    comentario?: ComentarioUncheckedUpdateManyWithoutRestauranteNestedInput
  }

  export type RestauranteUpdateManyMutationInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    departamento?: StringFieldUpdateOperationsInput | string
    telefono?: IntFieldUpdateOperationsInput | number
    referencia?: StringFieldUpdateOperationsInput | string
    distrito?: StringFieldUpdateOperationsInput | string
    provincia?: StringFieldUpdateOperationsInput | string
    tipo?: StringFieldUpdateOperationsInput | string
    apertura?: DateTimeFieldUpdateOperationsInput | Date | string
    cierre?: DateTimeFieldUpdateOperationsInput | Date | string
    fech_creacion?: DateTimeFieldUpdateOperationsInput | Date | string
    calificacion?: FloatFieldUpdateOperationsInput | number
    descripcion?: StringFieldUpdateOperationsInput | string
  }

  export type RestauranteUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    departamento?: StringFieldUpdateOperationsInput | string
    telefono?: IntFieldUpdateOperationsInput | number
    referencia?: StringFieldUpdateOperationsInput | string
    distrito?: StringFieldUpdateOperationsInput | string
    provincia?: StringFieldUpdateOperationsInput | string
    usuarioId?: NullableIntFieldUpdateOperationsInput | number | null
    tipo?: StringFieldUpdateOperationsInput | string
    apertura?: DateTimeFieldUpdateOperationsInput | Date | string
    cierre?: DateTimeFieldUpdateOperationsInput | Date | string
    fech_creacion?: DateTimeFieldUpdateOperationsInput | Date | string
    calificacion?: FloatFieldUpdateOperationsInput | number
    descripcion?: StringFieldUpdateOperationsInput | string
  }

  export type PlatoCreateInput = {
    nombre_plato: string
    precio: number
    imagen: string
    disponibilidad?: boolean
    descripcion: string
    restaurante: RestauranteCreateNestedOneWithoutPlatoInput
  }

  export type PlatoUncheckedCreateInput = {
    id?: number
    nombre_plato: string
    precio: number
    imagen: string
    disponibilidad?: boolean
    descripcion: string
    restaurante_id: number
  }

  export type PlatoUpdateInput = {
    nombre_plato?: StringFieldUpdateOperationsInput | string
    precio?: FloatFieldUpdateOperationsInput | number
    imagen?: StringFieldUpdateOperationsInput | string
    disponibilidad?: BoolFieldUpdateOperationsInput | boolean
    descripcion?: StringFieldUpdateOperationsInput | string
    restaurante?: RestauranteUpdateOneRequiredWithoutPlatoNestedInput
  }

  export type PlatoUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre_plato?: StringFieldUpdateOperationsInput | string
    precio?: FloatFieldUpdateOperationsInput | number
    imagen?: StringFieldUpdateOperationsInput | string
    disponibilidad?: BoolFieldUpdateOperationsInput | boolean
    descripcion?: StringFieldUpdateOperationsInput | string
    restaurante_id?: IntFieldUpdateOperationsInput | number
  }

  export type PlatoUpdateManyMutationInput = {
    nombre_plato?: StringFieldUpdateOperationsInput | string
    precio?: FloatFieldUpdateOperationsInput | number
    imagen?: StringFieldUpdateOperationsInput | string
    disponibilidad?: BoolFieldUpdateOperationsInput | boolean
    descripcion?: StringFieldUpdateOperationsInput | string
  }

  export type PlatoUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre_plato?: StringFieldUpdateOperationsInput | string
    precio?: FloatFieldUpdateOperationsInput | number
    imagen?: StringFieldUpdateOperationsInput | string
    disponibilidad?: BoolFieldUpdateOperationsInput | boolean
    descripcion?: StringFieldUpdateOperationsInput | string
    restaurante_id?: IntFieldUpdateOperationsInput | number
  }

  export type ComentarioCreateInput = {
    comentario: string
    calificacion: number
    restaurante: RestauranteCreateNestedOneWithoutComentarioInput
  }

  export type ComentarioUncheckedCreateInput = {
    id?: number
    comentario: string
    calificacion: number
    restaurante_id: number
  }

  export type ComentarioUpdateInput = {
    comentario?: StringFieldUpdateOperationsInput | string
    calificacion?: IntFieldUpdateOperationsInput | number
    restaurante?: RestauranteUpdateOneRequiredWithoutComentarioNestedInput
  }

  export type ComentarioUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    comentario?: StringFieldUpdateOperationsInput | string
    calificacion?: IntFieldUpdateOperationsInput | number
    restaurante_id?: IntFieldUpdateOperationsInput | number
  }

  export type ComentarioUpdateManyMutationInput = {
    comentario?: StringFieldUpdateOperationsInput | string
    calificacion?: IntFieldUpdateOperationsInput | number
  }

  export type ComentarioUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    comentario?: StringFieldUpdateOperationsInput | string
    calificacion?: IntFieldUpdateOperationsInput | number
    restaurante_id?: IntFieldUpdateOperationsInput | number
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type BoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type RestauranteListRelationFilter = {
    every?: RestauranteWhereInput
    some?: RestauranteWhereInput
    none?: RestauranteWhereInput
  }

  export type RestauranteOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UsuarioCountOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    dni?: SortOrder
    telefono?: SortOrder
    correo?: SortOrder
    contrasena?: SortOrder
    es_propietario?: SortOrder
  }

  export type UsuarioAvgOrderByAggregateInput = {
    id?: SortOrder
    dni?: SortOrder
    telefono?: SortOrder
  }

  export type UsuarioMaxOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    dni?: SortOrder
    telefono?: SortOrder
    correo?: SortOrder
    contrasena?: SortOrder
    es_propietario?: SortOrder
  }

  export type UsuarioMinOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    dni?: SortOrder
    telefono?: SortOrder
    correo?: SortOrder
    contrasena?: SortOrder
    es_propietario?: SortOrder
  }

  export type UsuarioSumOrderByAggregateInput = {
    id?: SortOrder
    dni?: SortOrder
    telefono?: SortOrder
  }

  export type IntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type BoolWithAggregatesFilter = {
    equals?: boolean
    not?: NestedBoolWithAggregatesFilter | boolean
    _count?: NestedIntFilter
    _min?: NestedBoolFilter
    _max?: NestedBoolFilter
  }

  export type UsuarioRelationFilter = {
    is?: UsuarioWhereInput | null
    isNot?: UsuarioWhereInput | null
  }

  export type IntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type DateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type FloatFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type PlatoListRelationFilter = {
    every?: PlatoWhereInput
    some?: PlatoWhereInput
    none?: PlatoWhereInput
  }

  export type ComentarioListRelationFilter = {
    every?: ComentarioWhereInput
    some?: ComentarioWhereInput
    none?: ComentarioWhereInput
  }

  export type PlatoOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ComentarioOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type RestauranteCountOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    departamento?: SortOrder
    telefono?: SortOrder
    referencia?: SortOrder
    distrito?: SortOrder
    provincia?: SortOrder
    usuarioId?: SortOrder
    tipo?: SortOrder
    apertura?: SortOrder
    cierre?: SortOrder
    fech_creacion?: SortOrder
    calificacion?: SortOrder
    descripcion?: SortOrder
  }

  export type RestauranteAvgOrderByAggregateInput = {
    id?: SortOrder
    telefono?: SortOrder
    usuarioId?: SortOrder
    calificacion?: SortOrder
  }

  export type RestauranteMaxOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    departamento?: SortOrder
    telefono?: SortOrder
    referencia?: SortOrder
    distrito?: SortOrder
    provincia?: SortOrder
    usuarioId?: SortOrder
    tipo?: SortOrder
    apertura?: SortOrder
    cierre?: SortOrder
    fech_creacion?: SortOrder
    calificacion?: SortOrder
    descripcion?: SortOrder
  }

  export type RestauranteMinOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    departamento?: SortOrder
    telefono?: SortOrder
    referencia?: SortOrder
    distrito?: SortOrder
    provincia?: SortOrder
    usuarioId?: SortOrder
    tipo?: SortOrder
    apertura?: SortOrder
    cierre?: SortOrder
    fech_creacion?: SortOrder
    calificacion?: SortOrder
    descripcion?: SortOrder
  }

  export type RestauranteSumOrderByAggregateInput = {
    id?: SortOrder
    telefono?: SortOrder
    usuarioId?: SortOrder
    calificacion?: SortOrder
  }

  export type IntNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedIntNullableFilter
    _min?: NestedIntNullableFilter
    _max?: NestedIntNullableFilter
  }

  export type DateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type FloatWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedFloatFilter
    _min?: NestedFloatFilter
    _max?: NestedFloatFilter
  }

  export type RestauranteRelationFilter = {
    is?: RestauranteWhereInput
    isNot?: RestauranteWhereInput
  }

  export type PlatoCountOrderByAggregateInput = {
    id?: SortOrder
    nombre_plato?: SortOrder
    precio?: SortOrder
    imagen?: SortOrder
    disponibilidad?: SortOrder
    descripcion?: SortOrder
    restaurante_id?: SortOrder
  }

  export type PlatoAvgOrderByAggregateInput = {
    id?: SortOrder
    precio?: SortOrder
    restaurante_id?: SortOrder
  }

  export type PlatoMaxOrderByAggregateInput = {
    id?: SortOrder
    nombre_plato?: SortOrder
    precio?: SortOrder
    imagen?: SortOrder
    disponibilidad?: SortOrder
    descripcion?: SortOrder
    restaurante_id?: SortOrder
  }

  export type PlatoMinOrderByAggregateInput = {
    id?: SortOrder
    nombre_plato?: SortOrder
    precio?: SortOrder
    imagen?: SortOrder
    disponibilidad?: SortOrder
    descripcion?: SortOrder
    restaurante_id?: SortOrder
  }

  export type PlatoSumOrderByAggregateInput = {
    id?: SortOrder
    precio?: SortOrder
    restaurante_id?: SortOrder
  }

  export type ComentarioCountOrderByAggregateInput = {
    id?: SortOrder
    comentario?: SortOrder
    calificacion?: SortOrder
    restaurante_id?: SortOrder
  }

  export type ComentarioAvgOrderByAggregateInput = {
    id?: SortOrder
    calificacion?: SortOrder
    restaurante_id?: SortOrder
  }

  export type ComentarioMaxOrderByAggregateInput = {
    id?: SortOrder
    comentario?: SortOrder
    calificacion?: SortOrder
    restaurante_id?: SortOrder
  }

  export type ComentarioMinOrderByAggregateInput = {
    id?: SortOrder
    comentario?: SortOrder
    calificacion?: SortOrder
    restaurante_id?: SortOrder
  }

  export type ComentarioSumOrderByAggregateInput = {
    id?: SortOrder
    calificacion?: SortOrder
    restaurante_id?: SortOrder
  }

  export type RestauranteCreateNestedManyWithoutUsuarioInput = {
    create?: XOR<Enumerable<RestauranteCreateWithoutUsuarioInput>, Enumerable<RestauranteUncheckedCreateWithoutUsuarioInput>>
    connectOrCreate?: Enumerable<RestauranteCreateOrConnectWithoutUsuarioInput>
    connect?: Enumerable<RestauranteWhereUniqueInput>
  }

  export type RestauranteUncheckedCreateNestedManyWithoutUsuarioInput = {
    create?: XOR<Enumerable<RestauranteCreateWithoutUsuarioInput>, Enumerable<RestauranteUncheckedCreateWithoutUsuarioInput>>
    connectOrCreate?: Enumerable<RestauranteCreateOrConnectWithoutUsuarioInput>
    connect?: Enumerable<RestauranteWhereUniqueInput>
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type RestauranteUpdateManyWithoutUsuarioNestedInput = {
    create?: XOR<Enumerable<RestauranteCreateWithoutUsuarioInput>, Enumerable<RestauranteUncheckedCreateWithoutUsuarioInput>>
    connectOrCreate?: Enumerable<RestauranteCreateOrConnectWithoutUsuarioInput>
    upsert?: Enumerable<RestauranteUpsertWithWhereUniqueWithoutUsuarioInput>
    set?: Enumerable<RestauranteWhereUniqueInput>
    disconnect?: Enumerable<RestauranteWhereUniqueInput>
    delete?: Enumerable<RestauranteWhereUniqueInput>
    connect?: Enumerable<RestauranteWhereUniqueInput>
    update?: Enumerable<RestauranteUpdateWithWhereUniqueWithoutUsuarioInput>
    updateMany?: Enumerable<RestauranteUpdateManyWithWhereWithoutUsuarioInput>
    deleteMany?: Enumerable<RestauranteScalarWhereInput>
  }

  export type RestauranteUncheckedUpdateManyWithoutUsuarioNestedInput = {
    create?: XOR<Enumerable<RestauranteCreateWithoutUsuarioInput>, Enumerable<RestauranteUncheckedCreateWithoutUsuarioInput>>
    connectOrCreate?: Enumerable<RestauranteCreateOrConnectWithoutUsuarioInput>
    upsert?: Enumerable<RestauranteUpsertWithWhereUniqueWithoutUsuarioInput>
    set?: Enumerable<RestauranteWhereUniqueInput>
    disconnect?: Enumerable<RestauranteWhereUniqueInput>
    delete?: Enumerable<RestauranteWhereUniqueInput>
    connect?: Enumerable<RestauranteWhereUniqueInput>
    update?: Enumerable<RestauranteUpdateWithWhereUniqueWithoutUsuarioInput>
    updateMany?: Enumerable<RestauranteUpdateManyWithWhereWithoutUsuarioInput>
    deleteMany?: Enumerable<RestauranteScalarWhereInput>
  }

  export type UsuarioCreateNestedOneWithoutRestauranteInput = {
    create?: XOR<UsuarioCreateWithoutRestauranteInput, UsuarioUncheckedCreateWithoutRestauranteInput>
    connectOrCreate?: UsuarioCreateOrConnectWithoutRestauranteInput
    connect?: UsuarioWhereUniqueInput
  }

  export type PlatoCreateNestedManyWithoutRestauranteInput = {
    create?: XOR<Enumerable<PlatoCreateWithoutRestauranteInput>, Enumerable<PlatoUncheckedCreateWithoutRestauranteInput>>
    connectOrCreate?: Enumerable<PlatoCreateOrConnectWithoutRestauranteInput>
    connect?: Enumerable<PlatoWhereUniqueInput>
  }

  export type ComentarioCreateNestedManyWithoutRestauranteInput = {
    create?: XOR<Enumerable<ComentarioCreateWithoutRestauranteInput>, Enumerable<ComentarioUncheckedCreateWithoutRestauranteInput>>
    connectOrCreate?: Enumerable<ComentarioCreateOrConnectWithoutRestauranteInput>
    connect?: Enumerable<ComentarioWhereUniqueInput>
  }

  export type PlatoUncheckedCreateNestedManyWithoutRestauranteInput = {
    create?: XOR<Enumerable<PlatoCreateWithoutRestauranteInput>, Enumerable<PlatoUncheckedCreateWithoutRestauranteInput>>
    connectOrCreate?: Enumerable<PlatoCreateOrConnectWithoutRestauranteInput>
    connect?: Enumerable<PlatoWhereUniqueInput>
  }

  export type ComentarioUncheckedCreateNestedManyWithoutRestauranteInput = {
    create?: XOR<Enumerable<ComentarioCreateWithoutRestauranteInput>, Enumerable<ComentarioUncheckedCreateWithoutRestauranteInput>>
    connectOrCreate?: Enumerable<ComentarioCreateOrConnectWithoutRestauranteInput>
    connect?: Enumerable<ComentarioWhereUniqueInput>
  }

  export type UsuarioUpdateOneWithoutRestauranteNestedInput = {
    create?: XOR<UsuarioCreateWithoutRestauranteInput, UsuarioUncheckedCreateWithoutRestauranteInput>
    connectOrCreate?: UsuarioCreateOrConnectWithoutRestauranteInput
    upsert?: UsuarioUpsertWithoutRestauranteInput
    disconnect?: boolean
    delete?: boolean
    connect?: UsuarioWhereUniqueInput
    update?: XOR<UsuarioUpdateWithoutRestauranteInput, UsuarioUncheckedUpdateWithoutRestauranteInput>
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type PlatoUpdateManyWithoutRestauranteNestedInput = {
    create?: XOR<Enumerable<PlatoCreateWithoutRestauranteInput>, Enumerable<PlatoUncheckedCreateWithoutRestauranteInput>>
    connectOrCreate?: Enumerable<PlatoCreateOrConnectWithoutRestauranteInput>
    upsert?: Enumerable<PlatoUpsertWithWhereUniqueWithoutRestauranteInput>
    set?: Enumerable<PlatoWhereUniqueInput>
    disconnect?: Enumerable<PlatoWhereUniqueInput>
    delete?: Enumerable<PlatoWhereUniqueInput>
    connect?: Enumerable<PlatoWhereUniqueInput>
    update?: Enumerable<PlatoUpdateWithWhereUniqueWithoutRestauranteInput>
    updateMany?: Enumerable<PlatoUpdateManyWithWhereWithoutRestauranteInput>
    deleteMany?: Enumerable<PlatoScalarWhereInput>
  }

  export type ComentarioUpdateManyWithoutRestauranteNestedInput = {
    create?: XOR<Enumerable<ComentarioCreateWithoutRestauranteInput>, Enumerable<ComentarioUncheckedCreateWithoutRestauranteInput>>
    connectOrCreate?: Enumerable<ComentarioCreateOrConnectWithoutRestauranteInput>
    upsert?: Enumerable<ComentarioUpsertWithWhereUniqueWithoutRestauranteInput>
    set?: Enumerable<ComentarioWhereUniqueInput>
    disconnect?: Enumerable<ComentarioWhereUniqueInput>
    delete?: Enumerable<ComentarioWhereUniqueInput>
    connect?: Enumerable<ComentarioWhereUniqueInput>
    update?: Enumerable<ComentarioUpdateWithWhereUniqueWithoutRestauranteInput>
    updateMany?: Enumerable<ComentarioUpdateManyWithWhereWithoutRestauranteInput>
    deleteMany?: Enumerable<ComentarioScalarWhereInput>
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type PlatoUncheckedUpdateManyWithoutRestauranteNestedInput = {
    create?: XOR<Enumerable<PlatoCreateWithoutRestauranteInput>, Enumerable<PlatoUncheckedCreateWithoutRestauranteInput>>
    connectOrCreate?: Enumerable<PlatoCreateOrConnectWithoutRestauranteInput>
    upsert?: Enumerable<PlatoUpsertWithWhereUniqueWithoutRestauranteInput>
    set?: Enumerable<PlatoWhereUniqueInput>
    disconnect?: Enumerable<PlatoWhereUniqueInput>
    delete?: Enumerable<PlatoWhereUniqueInput>
    connect?: Enumerable<PlatoWhereUniqueInput>
    update?: Enumerable<PlatoUpdateWithWhereUniqueWithoutRestauranteInput>
    updateMany?: Enumerable<PlatoUpdateManyWithWhereWithoutRestauranteInput>
    deleteMany?: Enumerable<PlatoScalarWhereInput>
  }

  export type ComentarioUncheckedUpdateManyWithoutRestauranteNestedInput = {
    create?: XOR<Enumerable<ComentarioCreateWithoutRestauranteInput>, Enumerable<ComentarioUncheckedCreateWithoutRestauranteInput>>
    connectOrCreate?: Enumerable<ComentarioCreateOrConnectWithoutRestauranteInput>
    upsert?: Enumerable<ComentarioUpsertWithWhereUniqueWithoutRestauranteInput>
    set?: Enumerable<ComentarioWhereUniqueInput>
    disconnect?: Enumerable<ComentarioWhereUniqueInput>
    delete?: Enumerable<ComentarioWhereUniqueInput>
    connect?: Enumerable<ComentarioWhereUniqueInput>
    update?: Enumerable<ComentarioUpdateWithWhereUniqueWithoutRestauranteInput>
    updateMany?: Enumerable<ComentarioUpdateManyWithWhereWithoutRestauranteInput>
    deleteMany?: Enumerable<ComentarioScalarWhereInput>
  }

  export type RestauranteCreateNestedOneWithoutPlatoInput = {
    create?: XOR<RestauranteCreateWithoutPlatoInput, RestauranteUncheckedCreateWithoutPlatoInput>
    connectOrCreate?: RestauranteCreateOrConnectWithoutPlatoInput
    connect?: RestauranteWhereUniqueInput
  }

  export type RestauranteUpdateOneRequiredWithoutPlatoNestedInput = {
    create?: XOR<RestauranteCreateWithoutPlatoInput, RestauranteUncheckedCreateWithoutPlatoInput>
    connectOrCreate?: RestauranteCreateOrConnectWithoutPlatoInput
    upsert?: RestauranteUpsertWithoutPlatoInput
    connect?: RestauranteWhereUniqueInput
    update?: XOR<RestauranteUpdateWithoutPlatoInput, RestauranteUncheckedUpdateWithoutPlatoInput>
  }

  export type RestauranteCreateNestedOneWithoutComentarioInput = {
    create?: XOR<RestauranteCreateWithoutComentarioInput, RestauranteUncheckedCreateWithoutComentarioInput>
    connectOrCreate?: RestauranteCreateOrConnectWithoutComentarioInput
    connect?: RestauranteWhereUniqueInput
  }

  export type RestauranteUpdateOneRequiredWithoutComentarioNestedInput = {
    create?: XOR<RestauranteCreateWithoutComentarioInput, RestauranteUncheckedCreateWithoutComentarioInput>
    connectOrCreate?: RestauranteCreateOrConnectWithoutComentarioInput
    upsert?: RestauranteUpsertWithoutComentarioInput
    connect?: RestauranteWhereUniqueInput
    update?: XOR<RestauranteUpdateWithoutComentarioInput, RestauranteUncheckedUpdateWithoutComentarioInput>
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedBoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type NestedIntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type NestedBoolWithAggregatesFilter = {
    equals?: boolean
    not?: NestedBoolWithAggregatesFilter | boolean
    _count?: NestedIntFilter
    _min?: NestedBoolFilter
    _max?: NestedBoolFilter
  }

  export type NestedIntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type NestedDateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type NestedIntNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedIntNullableFilter
    _min?: NestedIntNullableFilter
    _max?: NestedIntNullableFilter
  }

  export type NestedFloatNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatNullableFilter | number | null
  }

  export type NestedDateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type NestedFloatWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedFloatFilter
    _min?: NestedFloatFilter
    _max?: NestedFloatFilter
  }

  export type RestauranteCreateWithoutUsuarioInput = {
    nombre: string
    departamento: string
    telefono: number
    referencia: string
    distrito: string
    provincia: string
    tipo: string
    apertura: Date | string
    cierre: Date | string
    fech_creacion: Date | string
    calificacion: number
    descripcion: string
    plato?: PlatoCreateNestedManyWithoutRestauranteInput
    comentario?: ComentarioCreateNestedManyWithoutRestauranteInput
  }

  export type RestauranteUncheckedCreateWithoutUsuarioInput = {
    id?: number
    nombre: string
    departamento: string
    telefono: number
    referencia: string
    distrito: string
    provincia: string
    tipo: string
    apertura: Date | string
    cierre: Date | string
    fech_creacion: Date | string
    calificacion: number
    descripcion: string
    plato?: PlatoUncheckedCreateNestedManyWithoutRestauranteInput
    comentario?: ComentarioUncheckedCreateNestedManyWithoutRestauranteInput
  }

  export type RestauranteCreateOrConnectWithoutUsuarioInput = {
    where: RestauranteWhereUniqueInput
    create: XOR<RestauranteCreateWithoutUsuarioInput, RestauranteUncheckedCreateWithoutUsuarioInput>
  }

  export type RestauranteUpsertWithWhereUniqueWithoutUsuarioInput = {
    where: RestauranteWhereUniqueInput
    update: XOR<RestauranteUpdateWithoutUsuarioInput, RestauranteUncheckedUpdateWithoutUsuarioInput>
    create: XOR<RestauranteCreateWithoutUsuarioInput, RestauranteUncheckedCreateWithoutUsuarioInput>
  }

  export type RestauranteUpdateWithWhereUniqueWithoutUsuarioInput = {
    where: RestauranteWhereUniqueInput
    data: XOR<RestauranteUpdateWithoutUsuarioInput, RestauranteUncheckedUpdateWithoutUsuarioInput>
  }

  export type RestauranteUpdateManyWithWhereWithoutUsuarioInput = {
    where: RestauranteScalarWhereInput
    data: XOR<RestauranteUpdateManyMutationInput, RestauranteUncheckedUpdateManyWithoutRestauranteInput>
  }

  export type RestauranteScalarWhereInput = {
    AND?: Enumerable<RestauranteScalarWhereInput>
    OR?: Enumerable<RestauranteScalarWhereInput>
    NOT?: Enumerable<RestauranteScalarWhereInput>
    id?: IntFilter | number
    nombre?: StringFilter | string
    departamento?: StringFilter | string
    telefono?: IntFilter | number
    referencia?: StringFilter | string
    distrito?: StringFilter | string
    provincia?: StringFilter | string
    usuarioId?: IntNullableFilter | number | null
    tipo?: StringFilter | string
    apertura?: DateTimeFilter | Date | string
    cierre?: DateTimeFilter | Date | string
    fech_creacion?: DateTimeFilter | Date | string
    calificacion?: FloatFilter | number
    descripcion?: StringFilter | string
  }

  export type UsuarioCreateWithoutRestauranteInput = {
    nombre: string
    dni: number
    telefono: number
    correo: string
    contrasena: string
    es_propietario: boolean
  }

  export type UsuarioUncheckedCreateWithoutRestauranteInput = {
    id?: number
    nombre: string
    dni: number
    telefono: number
    correo: string
    contrasena: string
    es_propietario: boolean
  }

  export type UsuarioCreateOrConnectWithoutRestauranteInput = {
    where: UsuarioWhereUniqueInput
    create: XOR<UsuarioCreateWithoutRestauranteInput, UsuarioUncheckedCreateWithoutRestauranteInput>
  }

  export type PlatoCreateWithoutRestauranteInput = {
    nombre_plato: string
    precio: number
    imagen: string
    disponibilidad?: boolean
    descripcion: string
  }

  export type PlatoUncheckedCreateWithoutRestauranteInput = {
    id?: number
    nombre_plato: string
    precio: number
    imagen: string
    disponibilidad?: boolean
    descripcion: string
  }

  export type PlatoCreateOrConnectWithoutRestauranteInput = {
    where: PlatoWhereUniqueInput
    create: XOR<PlatoCreateWithoutRestauranteInput, PlatoUncheckedCreateWithoutRestauranteInput>
  }

  export type ComentarioCreateWithoutRestauranteInput = {
    comentario: string
    calificacion: number
  }

  export type ComentarioUncheckedCreateWithoutRestauranteInput = {
    id?: number
    comentario: string
    calificacion: number
  }

  export type ComentarioCreateOrConnectWithoutRestauranteInput = {
    where: ComentarioWhereUniqueInput
    create: XOR<ComentarioCreateWithoutRestauranteInput, ComentarioUncheckedCreateWithoutRestauranteInput>
  }

  export type UsuarioUpsertWithoutRestauranteInput = {
    update: XOR<UsuarioUpdateWithoutRestauranteInput, UsuarioUncheckedUpdateWithoutRestauranteInput>
    create: XOR<UsuarioCreateWithoutRestauranteInput, UsuarioUncheckedCreateWithoutRestauranteInput>
  }

  export type UsuarioUpdateWithoutRestauranteInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    dni?: IntFieldUpdateOperationsInput | number
    telefono?: IntFieldUpdateOperationsInput | number
    correo?: StringFieldUpdateOperationsInput | string
    contrasena?: StringFieldUpdateOperationsInput | string
    es_propietario?: BoolFieldUpdateOperationsInput | boolean
  }

  export type UsuarioUncheckedUpdateWithoutRestauranteInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    dni?: IntFieldUpdateOperationsInput | number
    telefono?: IntFieldUpdateOperationsInput | number
    correo?: StringFieldUpdateOperationsInput | string
    contrasena?: StringFieldUpdateOperationsInput | string
    es_propietario?: BoolFieldUpdateOperationsInput | boolean
  }

  export type PlatoUpsertWithWhereUniqueWithoutRestauranteInput = {
    where: PlatoWhereUniqueInput
    update: XOR<PlatoUpdateWithoutRestauranteInput, PlatoUncheckedUpdateWithoutRestauranteInput>
    create: XOR<PlatoCreateWithoutRestauranteInput, PlatoUncheckedCreateWithoutRestauranteInput>
  }

  export type PlatoUpdateWithWhereUniqueWithoutRestauranteInput = {
    where: PlatoWhereUniqueInput
    data: XOR<PlatoUpdateWithoutRestauranteInput, PlatoUncheckedUpdateWithoutRestauranteInput>
  }

  export type PlatoUpdateManyWithWhereWithoutRestauranteInput = {
    where: PlatoScalarWhereInput
    data: XOR<PlatoUpdateManyMutationInput, PlatoUncheckedUpdateManyWithoutPlatoInput>
  }

  export type PlatoScalarWhereInput = {
    AND?: Enumerable<PlatoScalarWhereInput>
    OR?: Enumerable<PlatoScalarWhereInput>
    NOT?: Enumerable<PlatoScalarWhereInput>
    id?: IntFilter | number
    nombre_plato?: StringFilter | string
    precio?: FloatFilter | number
    imagen?: StringFilter | string
    disponibilidad?: BoolFilter | boolean
    descripcion?: StringFilter | string
    restaurante_id?: IntFilter | number
  }

  export type ComentarioUpsertWithWhereUniqueWithoutRestauranteInput = {
    where: ComentarioWhereUniqueInput
    update: XOR<ComentarioUpdateWithoutRestauranteInput, ComentarioUncheckedUpdateWithoutRestauranteInput>
    create: XOR<ComentarioCreateWithoutRestauranteInput, ComentarioUncheckedCreateWithoutRestauranteInput>
  }

  export type ComentarioUpdateWithWhereUniqueWithoutRestauranteInput = {
    where: ComentarioWhereUniqueInput
    data: XOR<ComentarioUpdateWithoutRestauranteInput, ComentarioUncheckedUpdateWithoutRestauranteInput>
  }

  export type ComentarioUpdateManyWithWhereWithoutRestauranteInput = {
    where: ComentarioScalarWhereInput
    data: XOR<ComentarioUpdateManyMutationInput, ComentarioUncheckedUpdateManyWithoutComentarioInput>
  }

  export type ComentarioScalarWhereInput = {
    AND?: Enumerable<ComentarioScalarWhereInput>
    OR?: Enumerable<ComentarioScalarWhereInput>
    NOT?: Enumerable<ComentarioScalarWhereInput>
    id?: IntFilter | number
    comentario?: StringFilter | string
    calificacion?: IntFilter | number
    restaurante_id?: IntFilter | number
  }

  export type RestauranteCreateWithoutPlatoInput = {
    nombre: string
    departamento: string
    telefono: number
    referencia: string
    distrito: string
    provincia: string
    usuario?: UsuarioCreateNestedOneWithoutRestauranteInput
    tipo: string
    apertura: Date | string
    cierre: Date | string
    fech_creacion: Date | string
    calificacion: number
    descripcion: string
    comentario?: ComentarioCreateNestedManyWithoutRestauranteInput
  }

  export type RestauranteUncheckedCreateWithoutPlatoInput = {
    id?: number
    nombre: string
    departamento: string
    telefono: number
    referencia: string
    distrito: string
    provincia: string
    usuarioId?: number | null
    tipo: string
    apertura: Date | string
    cierre: Date | string
    fech_creacion: Date | string
    calificacion: number
    descripcion: string
    comentario?: ComentarioUncheckedCreateNestedManyWithoutRestauranteInput
  }

  export type RestauranteCreateOrConnectWithoutPlatoInput = {
    where: RestauranteWhereUniqueInput
    create: XOR<RestauranteCreateWithoutPlatoInput, RestauranteUncheckedCreateWithoutPlatoInput>
  }

  export type RestauranteUpsertWithoutPlatoInput = {
    update: XOR<RestauranteUpdateWithoutPlatoInput, RestauranteUncheckedUpdateWithoutPlatoInput>
    create: XOR<RestauranteCreateWithoutPlatoInput, RestauranteUncheckedCreateWithoutPlatoInput>
  }

  export type RestauranteUpdateWithoutPlatoInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    departamento?: StringFieldUpdateOperationsInput | string
    telefono?: IntFieldUpdateOperationsInput | number
    referencia?: StringFieldUpdateOperationsInput | string
    distrito?: StringFieldUpdateOperationsInput | string
    provincia?: StringFieldUpdateOperationsInput | string
    usuario?: UsuarioUpdateOneWithoutRestauranteNestedInput
    tipo?: StringFieldUpdateOperationsInput | string
    apertura?: DateTimeFieldUpdateOperationsInput | Date | string
    cierre?: DateTimeFieldUpdateOperationsInput | Date | string
    fech_creacion?: DateTimeFieldUpdateOperationsInput | Date | string
    calificacion?: FloatFieldUpdateOperationsInput | number
    descripcion?: StringFieldUpdateOperationsInput | string
    comentario?: ComentarioUpdateManyWithoutRestauranteNestedInput
  }

  export type RestauranteUncheckedUpdateWithoutPlatoInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    departamento?: StringFieldUpdateOperationsInput | string
    telefono?: IntFieldUpdateOperationsInput | number
    referencia?: StringFieldUpdateOperationsInput | string
    distrito?: StringFieldUpdateOperationsInput | string
    provincia?: StringFieldUpdateOperationsInput | string
    usuarioId?: NullableIntFieldUpdateOperationsInput | number | null
    tipo?: StringFieldUpdateOperationsInput | string
    apertura?: DateTimeFieldUpdateOperationsInput | Date | string
    cierre?: DateTimeFieldUpdateOperationsInput | Date | string
    fech_creacion?: DateTimeFieldUpdateOperationsInput | Date | string
    calificacion?: FloatFieldUpdateOperationsInput | number
    descripcion?: StringFieldUpdateOperationsInput | string
    comentario?: ComentarioUncheckedUpdateManyWithoutRestauranteNestedInput
  }

  export type RestauranteCreateWithoutComentarioInput = {
    nombre: string
    departamento: string
    telefono: number
    referencia: string
    distrito: string
    provincia: string
    usuario?: UsuarioCreateNestedOneWithoutRestauranteInput
    tipo: string
    apertura: Date | string
    cierre: Date | string
    fech_creacion: Date | string
    calificacion: number
    descripcion: string
    plato?: PlatoCreateNestedManyWithoutRestauranteInput
  }

  export type RestauranteUncheckedCreateWithoutComentarioInput = {
    id?: number
    nombre: string
    departamento: string
    telefono: number
    referencia: string
    distrito: string
    provincia: string
    usuarioId?: number | null
    tipo: string
    apertura: Date | string
    cierre: Date | string
    fech_creacion: Date | string
    calificacion: number
    descripcion: string
    plato?: PlatoUncheckedCreateNestedManyWithoutRestauranteInput
  }

  export type RestauranteCreateOrConnectWithoutComentarioInput = {
    where: RestauranteWhereUniqueInput
    create: XOR<RestauranteCreateWithoutComentarioInput, RestauranteUncheckedCreateWithoutComentarioInput>
  }

  export type RestauranteUpsertWithoutComentarioInput = {
    update: XOR<RestauranteUpdateWithoutComentarioInput, RestauranteUncheckedUpdateWithoutComentarioInput>
    create: XOR<RestauranteCreateWithoutComentarioInput, RestauranteUncheckedCreateWithoutComentarioInput>
  }

  export type RestauranteUpdateWithoutComentarioInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    departamento?: StringFieldUpdateOperationsInput | string
    telefono?: IntFieldUpdateOperationsInput | number
    referencia?: StringFieldUpdateOperationsInput | string
    distrito?: StringFieldUpdateOperationsInput | string
    provincia?: StringFieldUpdateOperationsInput | string
    usuario?: UsuarioUpdateOneWithoutRestauranteNestedInput
    tipo?: StringFieldUpdateOperationsInput | string
    apertura?: DateTimeFieldUpdateOperationsInput | Date | string
    cierre?: DateTimeFieldUpdateOperationsInput | Date | string
    fech_creacion?: DateTimeFieldUpdateOperationsInput | Date | string
    calificacion?: FloatFieldUpdateOperationsInput | number
    descripcion?: StringFieldUpdateOperationsInput | string
    plato?: PlatoUpdateManyWithoutRestauranteNestedInput
  }

  export type RestauranteUncheckedUpdateWithoutComentarioInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    departamento?: StringFieldUpdateOperationsInput | string
    telefono?: IntFieldUpdateOperationsInput | number
    referencia?: StringFieldUpdateOperationsInput | string
    distrito?: StringFieldUpdateOperationsInput | string
    provincia?: StringFieldUpdateOperationsInput | string
    usuarioId?: NullableIntFieldUpdateOperationsInput | number | null
    tipo?: StringFieldUpdateOperationsInput | string
    apertura?: DateTimeFieldUpdateOperationsInput | Date | string
    cierre?: DateTimeFieldUpdateOperationsInput | Date | string
    fech_creacion?: DateTimeFieldUpdateOperationsInput | Date | string
    calificacion?: FloatFieldUpdateOperationsInput | number
    descripcion?: StringFieldUpdateOperationsInput | string
    plato?: PlatoUncheckedUpdateManyWithoutRestauranteNestedInput
  }

  export type RestauranteUpdateWithoutUsuarioInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    departamento?: StringFieldUpdateOperationsInput | string
    telefono?: IntFieldUpdateOperationsInput | number
    referencia?: StringFieldUpdateOperationsInput | string
    distrito?: StringFieldUpdateOperationsInput | string
    provincia?: StringFieldUpdateOperationsInput | string
    tipo?: StringFieldUpdateOperationsInput | string
    apertura?: DateTimeFieldUpdateOperationsInput | Date | string
    cierre?: DateTimeFieldUpdateOperationsInput | Date | string
    fech_creacion?: DateTimeFieldUpdateOperationsInput | Date | string
    calificacion?: FloatFieldUpdateOperationsInput | number
    descripcion?: StringFieldUpdateOperationsInput | string
    plato?: PlatoUpdateManyWithoutRestauranteNestedInput
    comentario?: ComentarioUpdateManyWithoutRestauranteNestedInput
  }

  export type RestauranteUncheckedUpdateWithoutUsuarioInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    departamento?: StringFieldUpdateOperationsInput | string
    telefono?: IntFieldUpdateOperationsInput | number
    referencia?: StringFieldUpdateOperationsInput | string
    distrito?: StringFieldUpdateOperationsInput | string
    provincia?: StringFieldUpdateOperationsInput | string
    tipo?: StringFieldUpdateOperationsInput | string
    apertura?: DateTimeFieldUpdateOperationsInput | Date | string
    cierre?: DateTimeFieldUpdateOperationsInput | Date | string
    fech_creacion?: DateTimeFieldUpdateOperationsInput | Date | string
    calificacion?: FloatFieldUpdateOperationsInput | number
    descripcion?: StringFieldUpdateOperationsInput | string
    plato?: PlatoUncheckedUpdateManyWithoutRestauranteNestedInput
    comentario?: ComentarioUncheckedUpdateManyWithoutRestauranteNestedInput
  }

  export type RestauranteUncheckedUpdateManyWithoutRestauranteInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    departamento?: StringFieldUpdateOperationsInput | string
    telefono?: IntFieldUpdateOperationsInput | number
    referencia?: StringFieldUpdateOperationsInput | string
    distrito?: StringFieldUpdateOperationsInput | string
    provincia?: StringFieldUpdateOperationsInput | string
    tipo?: StringFieldUpdateOperationsInput | string
    apertura?: DateTimeFieldUpdateOperationsInput | Date | string
    cierre?: DateTimeFieldUpdateOperationsInput | Date | string
    fech_creacion?: DateTimeFieldUpdateOperationsInput | Date | string
    calificacion?: FloatFieldUpdateOperationsInput | number
    descripcion?: StringFieldUpdateOperationsInput | string
  }

  export type PlatoUpdateWithoutRestauranteInput = {
    nombre_plato?: StringFieldUpdateOperationsInput | string
    precio?: FloatFieldUpdateOperationsInput | number
    imagen?: StringFieldUpdateOperationsInput | string
    disponibilidad?: BoolFieldUpdateOperationsInput | boolean
    descripcion?: StringFieldUpdateOperationsInput | string
  }

  export type PlatoUncheckedUpdateWithoutRestauranteInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre_plato?: StringFieldUpdateOperationsInput | string
    precio?: FloatFieldUpdateOperationsInput | number
    imagen?: StringFieldUpdateOperationsInput | string
    disponibilidad?: BoolFieldUpdateOperationsInput | boolean
    descripcion?: StringFieldUpdateOperationsInput | string
  }

  export type PlatoUncheckedUpdateManyWithoutPlatoInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre_plato?: StringFieldUpdateOperationsInput | string
    precio?: FloatFieldUpdateOperationsInput | number
    imagen?: StringFieldUpdateOperationsInput | string
    disponibilidad?: BoolFieldUpdateOperationsInput | boolean
    descripcion?: StringFieldUpdateOperationsInput | string
  }

  export type ComentarioUpdateWithoutRestauranteInput = {
    comentario?: StringFieldUpdateOperationsInput | string
    calificacion?: IntFieldUpdateOperationsInput | number
  }

  export type ComentarioUncheckedUpdateWithoutRestauranteInput = {
    id?: IntFieldUpdateOperationsInput | number
    comentario?: StringFieldUpdateOperationsInput | string
    calificacion?: IntFieldUpdateOperationsInput | number
  }

  export type ComentarioUncheckedUpdateManyWithoutComentarioInput = {
    id?: IntFieldUpdateOperationsInput | number
    comentario?: StringFieldUpdateOperationsInput | string
    calificacion?: IntFieldUpdateOperationsInput | number
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}